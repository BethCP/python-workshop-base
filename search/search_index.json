{
    "docs": [
        {
            "location": "/",
            "text": "Introduction to Python Workshop\n\n\nWelcome to \nIntroduction to Python\n !\n\n\nModules\n\n\n\n\n01 - \nIntroduction - the basics of Python\n\n\n02 - \nData analysis in Python with Pandas\n\n\n03 - \nIndexing and slicing\n\n\n04 - \nRepetitive tasks with loops\n\n\n05 - \nPlotting with plotnine (ggplot)\n\n\n\n\nSome of these modules have been adapted from the original versions at \n\nData Carpentry - Python for Ecologists\n \n(used under a \nCC-BY 4.0 license\n).",
            "title": "Home"
        },
        {
            "location": "/#introduction-to-python-workshop",
            "text": "Welcome to  Introduction to Python  !",
            "title": "Introduction to Python Workshop"
        },
        {
            "location": "/#modules",
            "text": "01 -  Introduction - the basics of Python  02 -  Data analysis in Python with Pandas  03 -  Indexing and slicing  04 -  Repetitive tasks with loops  05 -  Plotting with plotnine (ggplot)   Some of these modules have been adapted from the original versions at  Data Carpentry - Python for Ecologists  \n(used under a  CC-BY 4.0 license ).",
            "title": "Modules"
        },
        {
            "location": "/modules/intro/",
            "text": ".output_label {\n    text-align: right;\n    margin: -1em;\n    padding: 0;\n    font-size: 0.5em;\n    color: grey\n}\n\n\n\n\nPython: the basics\n\n\nPython is a general purpose programming language that supports rapid development\nof scripts and applications.\n\n\nPython's main advantages:\n\n\n\n\nOpen Source software, supported by Python Software Foundation\n\n\nAvailable on all major platforms (ie. Windows, Linux and MacOS) \n\n\nIt is a general-purpose programming language, designed for readability\n\n\nSupports multiple programming paradigms ('functional', 'object oriented')\n\n\nVery large community with a rich ecosystem of third-party packages\n\n\n\n\nInterpreter\n\n\nPython is an interpreted language\n*\n which can be used in two ways:\n\n\n\n\n\"Interactive\" Mode: It functions like an \"advanced calculator\", executing\n  one command at a time:\n\n\n\n\nuser:host:~$ python\nPython 3.5.1 (default, Oct 23 2015, 18:05:06)\n[GCC 4.8.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 2 + 2\n4\n>>> print(\"Hello World\")\nHello World\n\n\n\n\n\n\n\"Scripting\" Mode: Executing a series of \"commands\" saved in text file,\n  usually with a \n.py\n extension after the name of your file:\n\n\n\n\nuser:host:~$ python my_script.py\nHello World\n\n\n\n\nUsing interactive Python in Jupyter-style notebooks\n\n\nA convenient and powerful way to use interactive-mode Python is via a Jupyter Notebook, or similar browser-based interface.\n\n\nThis particularly lends itself to data analysis since the notebook records a history of commands and shows output and graphs immediately in the browser.\n\n\nThere are several ways you can run a Jupyter(-style) notebook - locally installed on your computer or hosted as a service on the web. Today we will use a Jupyter notebook service provided by Google: https://colab.research.google.com (Colaboratory).\n\n\nJupyter-style notebooks: a quick tour\n\n\nGo to https://colab.research.google.com and login with your Google account.\n\n\nSelect \nNEW NOTEBOOK \u2192 NEW PYTHON 3 NOTEBOOK\n - a new notebook will be created.\n\n\n\n\nType some Python code in the top cell, eg:\n\n\nprint(\"Hello Jupyter !\")\n\n\n\n\nShift-Enter\n to run the contents of the cell\n\n\n\n\nYou can add new cells.\n\n\nInsert \u2192 Insert Code Cell\n\n\n\n\nNOTE: When the text on the left hand of the cell is: \nIn [*]\n (with an asterisk rather than a number), the cell is still running. It's usually best to wait until one cell has finished running before running the next.\n\n\nLet's begin writing some code in our notebook.\n\n\nprint(\"Hello Jupyter !\")\n\n\n\n\n\n\noutput\n\n\n\nHello Jupyter !\n\n\n\n\n\n\n\nIn Jupyter/Collaboratory, just typing the name of a variable in the cell prints its representation:\n\n\nmessage = \"Hello again !\"\nmessage\n\n\n\n\n\n\noutput\n\n\n\n'Hello again !'\n\n\n\n\n\n\n# A 'hash' symbol denotes a comment\n# This is a comment. Anything after the 'hash' symbol on the line is ignored by the Python interpreter\n\nprint(\"No comment\")  # comment\n\n\n\n\n\n\noutput\n\n\n\nNo comment\n\n\n\n\n\n\n\nVariables and data types\n\n\nIntegers, floats, strings\n\n\na = 5\n\n\n\n\na\n\n\n\n\n\n\noutput\n\n\n\n5\n\n\n\n\n\n\ntype(a)\n\n\n\n\n\n\noutput\n\n\n\nint\n\n\n\n\n\n\nAdding a decimal point creates a \nfloat\n\n\nb = 5.0\n\n\n\n\nb\n\n\n\n\n\n\noutput\n\n\n\n5.0\n\n\n\n\n\n\ntype(b)\n\n\n\n\n\n\noutput\n\n\n\nfloat\n\n\n\n\n\n\nint\n and \nfloat\n are collectively called 'numeric' types\n\n\n(There are also other numeric types like \nhex\n for hexidemical and \ncomplex\n for complex numbers)\n\n\nChallenge - Types\n\n\nWhat is the \ntype\n of the variable \nletters\n defined below ?\n\n\nletters = \"ABACBS\"\n\n\n\n\nA) \nint\n\n\nB) \nstr\n\n\nC) \nfloat\n\n\nD) \ntext\n\n\n\n\nWrite some code the outputs the type - paste your answer into the Etherpad.\n\n\n\n\n\n\n\n\nStrings\n\n\nsome_words = \"Python3 strings are Unicode (UTF-8) \u2764\u2764\u2764 \ud83d\ude38 \u86c7\"\n\n\n\n\nsome_words\n\n\n\n\n\n\noutput\n\n\n\n'Python3 strings are Unicode (UTF-8) \u2764\u2764\u2764 \ud83d\ude38 \u86c7'\n\n\n\n\n\n\ntype(some_words)\n\n\n\n\n\n\noutput\n\n\n\nstr\n\n\n\n\n\n\nThe variable \nsome_words\n is of type \nstr\n, short for \"string\". Strings hold\nsequences of characters, which can be letters, numbers, punctuation\nor more exotic forms of text (even emoji!).\n\n\nOperators\n\n\nWe can perform mathematical calculations in Python using the basic operators:\n\n\n+\n  \n-\n  \n*\n  \n/\n  \n%\n  \n**\n\n\n2 + 2  # Addition\n\n\n\n\n\n\noutput\n\n\n\n4\n\n\n\n\n\n\n6 * 7  # Multiplication\n\n\n\n\n\n\noutput\n\n\n\n42\n\n\n\n\n\n\n2 ** 16  # Power\n\n\n\n\n\n\noutput\n\n\n\n65536\n\n\n\n\n\n\n13 % 5  # Modulo\n\n\n\n\n\n\noutput\n\n\n\n3\n\n\n\n\n\n\n# int + int = int\na = 5\na + 1\n\n\n\n\n\n\noutput\n\n\n\n6\n\n\n\n\n\n\n# float + int = float\nb = 5.0\nb + 1\n\n\n\n\n\n\noutput\n\n\n\n6.0\n\n\n\n\n\n\na + b\n\n\n\n\n\n\noutput\n\n\n\n10.0\n\n\n\n\n\n\nsome_words = \"I'm a string\"\na = 6\na + some_words\n\n\n\n\nOutputs:\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-781eba7cf148> in <module>()\n      1 some_words = \"I'm a string\"\n      2 a = 6\n----> 3 a + some_words\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'\n\n\n\n\nstr(a) + \" \" + some_words\n\n\n\n\n\n\noutput\n\n\n\n'5 Python3 strings are Unicode (UTF-8) \u2764\u2764\u2764 \ud83d\ude38 \u86c7'\n\n\n\n\n\n\n# Shorthand: operators with assignment\na += 1\na\n\n# Equivalent to:\n# a = a + 1\n\n\n\n\n\n\noutput\n\n\n\n6\n\n\n\n\n\n\nBoolean operations\n\n\nWe can also use comparison and logic operators:\n\n<, >, ==, !=, <=, >=\n and statements of identity such as\n\nand, or, not\n. The data type returned by this is\ncalled a \nboolean\n.\n\n\n3 > 4\n\n\n\n\n\n\noutput\n\n\n\nFalse\n\n\n\n\n\n\nTrue and True\n\n\n\n\n\n\noutput\n\n\n\nTrue\n\n\n\n\n\n\nTrue or False\n\n\n\n\n\n\noutput\n\n\n\nTrue\n\n\n\n\n\n\nLists and sequence types\n\n\nLists\n\n\nnumbers = [2, 4, 6, 8, 10]\nnumbers\n\n\n\n\n\n\noutput\n\n\n\n[2, 4, 6, 8, 10]\n\n\n\n\n\n\n# `len` get the length of a list\nlen(numbers)\n\n\n\n\n\n\noutput\n\n\n\n5\n\n\n\n\n\n\n# Lists can contain multiple data types, including other lists\nmixed_list = [\"asdf\", 2, 3.142, numbers, ['a','b','c']]\nmixed_list\n\n\n\n\n\n\noutput\n\n\n\n['asdf', 2, 3.142, [2, 4, 6, 8, 10], ['a', 'b', 'c']]\n\n\n\n\n\n\nYou can retrieve items from a list by their \nindex\n. In Python, the first item has an index of 0 (zero).\n\n\nnumbers[0]\n\n\n\n\n\n\noutput\n\n\n\n2\n\n\n\n\n\n\nnumbers[3]\n\n\n\n\n\n\noutput\n\n\n\n8\n\n\n\n\n\n\nYou can also assign a new value to any position in the list.\n\n\nnumbers[3] = numbers[3] * 100\nnumbers\n\n\n\n\n\n\noutput\n\n\n\n[2, 4, 6, 800, 10]\n\n\n\n\n\n\nYou can append items to the end of the list.\n\n\nnumbers.append(12)\nnumbers\n\n\n\n\n\n\noutput\n\n\n\n[2, 4, 6, 800, 10, 12]\n\n\n\n\n\n\nYou can add multiple items to the end of a list with \nextend\n.\n\n\nnumbers.extend([14, 16, 18])\nnumbers\n\n\n\n\n\n\noutput\n\n\n\n[2, 4, 6, 800, 10, 12, 14, 16, 18]\n\n\n\n\n\n\nLoops\n\n\nA for loop can be used to access the elements in a list or other Python data structure one at a time. We will learn about loops in other lesson.\n\n\nfor num in numbers:\n    print(num)\n\n\n\n\n\n\noutput\n\n\n\n2\n4\n6\n800\n10\n12\n14\n16\n18\n\n\n\n\n\n\n\nIndentation\n is very important in Python. Note that the second line in the\nexample above is indented, indicating the code that is the body of the loop.\n\n\nTo find out what methods are available for an object, we can use the built-in \nhelp\n command:\n\n\nhelp(numbers)\n\n\n\n\n\n\noutput\n\n\n\nHelp on list object:\n\nclass list(object)\n |  list() -> new empty list\n |  list(iterable) -> new list initialized from iterable's items\n |  \n |  Methods defined here:\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __getitem__(...)\n |      x.__getitem__(y) \n<\n==> x[y]\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  __iadd__(self, value, /)\n |      Implement self+=value.\n |  \n |  __imul__(self, value, /)\n |      Implement self*=value.\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __le__(self, value, /)\n |      Return self\n<\n=value.\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  __lt__(self, value, /)\n |      Return self\n None -- append object to end\n |  \n |  clear(...)\n |      L.clear() -> None -- remove all items from L\n |  \n |  copy(...)\n |      L.copy() -> list -- a shallow copy of L\n |  \n |  count(...)\n |      L.count(value) -> integer -- return number of occurrences of value\n |  \n |  extend(...)\n |      L.extend(iterable) -> None -- extend list by appending elements from the iterable\n |  \n |  index(...)\n |      L.index(value, [start, [stop]]) -> integer -- return first index of value.\n |      Raises ValueError if the value is not present.\n |  \n |  insert(...)\n |      L.insert(index, object) -- insert object before index\n |  \n |  pop(...)\n |      L.pop([index]) -> item -- remove and return item at index (default last).\n |      Raises IndexError if list is empty or index is out of range.\n |  \n |  remove(...)\n |      L.remove(value) -> None -- remove first occurrence of value.\n |      Raises ValueError if the value is not present.\n |  \n |  reverse(...)\n |      L.reverse() -- reverse *IN PLACE*\n |  \n |  sort(...)\n |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None\n\n\n\n\n\n\n\n\nTuples\n\n\nA tuple is similar to a list in that it's an ordered sequence of elements.\nHowever, tuples can not be changed once created (they are \"immutable\"). Tuples\nare created by placing comma-separated values inside parentheses \n()\n.\n\n\ntuples_are_immutable = (\"bar\", 100, 200, \"foo\")\ntuples_are_immutable\n\n\n\n\n\n\noutput\n\n\n\n('bar', 100, 200, 'foo')\n\n\n\n\n\n\ntuples_are_immutable[1]\n\n\n\n\n\n\noutput\n\n\n\n100\n\n\n\n\n\n\ntuples_are_immutable[1] = 666\n\n\n\n\nOutputs:\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-39-c91965b0815a> in <module>()\n----> 1 tuples_are_immutable[1] = 666\n\nTypeError: 'tuple' object does not support item assignment\n\n\n\n\nChallenge - Tuples\n\n\nDefine a tuple:\n\n\na_tuple = (1, 2, 3)\n\n\n\n\n\n\nWhat happens when you type \na_tuple[2] = 5\n vs \na_list[1] = 5\n ?\n\n\nType \ntype(a_tuple)\n into python - what is the object type?\n\n\n\n\n\n\n\n\n\n\nDictionaries\n\n\nDictionaries are a container that store key-value pairs. They are unordered. \n\n\nOther programming languages might call this a 'hash', 'hashtable' or 'hashmap'.\n\n\npairs = {'Apple': 1, 'Orange': 2, 'Pear': 4}\npairs\n\n\n\n\n\n\noutput\n\n\n\n{'Apple': 1, 'Orange': 2, 'Pear': 4}\n\n\n\n\n\n\npairs['Orange']\n\n\n\n\n\n\noutput\n\n\n\n2\n\n\n\n\n\n\npairs['Orange'] = 16\npairs\n\n\n\n\n\n\noutput\n\n\n\n{'Apple': 1, 'Orange': 16, 'Pear': 4}\n\n\n\n\n\n\nThe \nitems\n method returns a sequence of the key-value pairs as tuples.\n\n\nvalues\n returns a sequence of just the values.\n\n\nkeys\n returns a sequence of just the keys.\n\n\n\n\nIn Python 3, the \n.items()\n, \n.values()\n and \n.keys()\n methods return a \n'dictionary view' object\n that behaves like a list or tuple in for loops but doesn't support indexing. 'Dictionary views' stay in sync even when the dictionary changes.\n\n\nYou can turn them into a normal list or tuple with the \nlist()\n or \ntuple()\n functions.\n\n\npairs.items()\n# list(pairs.items())\n\n\n\n\n\n\noutput\n\n\n\ndict_items([('Apple', 1), ('Orange', 16), ('Pear', 4)])\n\n\n\n\n\n\npairs.values()\n# list(pairs.values())\n\n\n\n\n\n\noutput\n\n\n\ndict_values([1, 16, 4])\n\n\n\n\n\n\npairs.keys()\n# list(pairs.keys())\n\n\n\n\n\n\noutput\n\n\n\ndict_keys(['Apple', 'Orange', 'Pear'])\n\n\n\n\n\n\nlen(pairs)\n\n\n\n\n\n\noutput\n\n\n\n3\n\n\n\n\n\n\ndict_of_dicts = {'first': {1:2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}\ndict_of_dicts\n\n\n\n\n\n\noutput\n\n\n\n{'first': {1: 2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}\n\n\n\n\n\n\nChallenge - Dictionaries\n\n\nGiven the dictionary:\n\n\njam_ratings = {'Plum': 6, 'Apricot': 2, 'Strawberry': 8}\n\n\n\n\nHow would you change the value associated with the key \nApricot\n to \n9\n.\n\n\nA) \njam_ratings = {'apricot': 9}\n\n\nB) \njam_ratings[9] = 'Apricot'\n\n\nC) \njam_ratings['Apricot'] = 9\n\n\nD) \njam_ratings[2] = 'Apricot'",
            "title": "Introduction - the basics of Python"
        },
        {
            "location": "/modules/intro/#python-the-basics",
            "text": "Python is a general purpose programming language that supports rapid development\nof scripts and applications.  Python's main advantages:   Open Source software, supported by Python Software Foundation  Available on all major platforms (ie. Windows, Linux and MacOS)   It is a general-purpose programming language, designed for readability  Supports multiple programming paradigms ('functional', 'object oriented')  Very large community with a rich ecosystem of third-party packages",
            "title": "Python: the basics"
        },
        {
            "location": "/modules/intro/#interpreter",
            "text": "Python is an interpreted language *  which can be used in two ways:   \"Interactive\" Mode: It functions like an \"advanced calculator\", executing\n  one command at a time:   user:host:~$ python\nPython 3.5.1 (default, Oct 23 2015, 18:05:06)\n[GCC 4.8.3] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> 2 + 2\n4\n>>> print(\"Hello World\")\nHello World   \"Scripting\" Mode: Executing a series of \"commands\" saved in text file,\n  usually with a  .py  extension after the name of your file:   user:host:~$ python my_script.py\nHello World",
            "title": "Interpreter"
        },
        {
            "location": "/modules/intro/#using-interactive-python-in-jupyter-style-notebooks",
            "text": "A convenient and powerful way to use interactive-mode Python is via a Jupyter Notebook, or similar browser-based interface.  This particularly lends itself to data analysis since the notebook records a history of commands and shows output and graphs immediately in the browser.  There are several ways you can run a Jupyter(-style) notebook - locally installed on your computer or hosted as a service on the web. Today we will use a Jupyter notebook service provided by Google: https://colab.research.google.com (Colaboratory).",
            "title": "Using interactive Python in Jupyter-style notebooks"
        },
        {
            "location": "/modules/intro/#jupyter-style-notebooks-a-quick-tour",
            "text": "Go to https://colab.research.google.com and login with your Google account.  Select  NEW NOTEBOOK \u2192 NEW PYTHON 3 NOTEBOOK  - a new notebook will be created.   Type some Python code in the top cell, eg:  print(\"Hello Jupyter !\")  Shift-Enter  to run the contents of the cell   You can add new cells.  Insert \u2192 Insert Code Cell   NOTE: When the text on the left hand of the cell is:  In [*]  (with an asterisk rather than a number), the cell is still running. It's usually best to wait until one cell has finished running before running the next.  Let's begin writing some code in our notebook.  print(\"Hello Jupyter !\")   output  \nHello Jupyter !   In Jupyter/Collaboratory, just typing the name of a variable in the cell prints its representation:  message = \"Hello again !\"\nmessage   output  \n'Hello again !'   # A 'hash' symbol denotes a comment\n# This is a comment. Anything after the 'hash' symbol on the line is ignored by the Python interpreter\n\nprint(\"No comment\")  # comment   output  \nNo comment",
            "title": "Jupyter-style notebooks: a quick tour"
        },
        {
            "location": "/modules/intro/#variables-and-data-types",
            "text": "",
            "title": "Variables and data types"
        },
        {
            "location": "/modules/intro/#integers-floats-strings",
            "text": "a = 5  a   output  \n5   type(a)   output  \nint   Adding a decimal point creates a  float  b = 5.0  b   output  \n5.0   type(b)   output  \nfloat   int  and  float  are collectively called 'numeric' types  (There are also other numeric types like  hex  for hexidemical and  complex  for complex numbers)",
            "title": "Integers, floats, strings"
        },
        {
            "location": "/modules/intro/#challenge-types",
            "text": "What is the  type  of the variable  letters  defined below ?  letters = \"ABACBS\"   A)  int  B)  str  C)  float  D)  text   Write some code the outputs the type - paste your answer into the Etherpad.",
            "title": "Challenge - Types"
        },
        {
            "location": "/modules/intro/#strings",
            "text": "some_words = \"Python3 strings are Unicode (UTF-8) \u2764\u2764\u2764 \ud83d\ude38 \u86c7\"  some_words   output  \n'Python3 strings are Unicode (UTF-8) \u2764\u2764\u2764 \ud83d\ude38 \u86c7'   type(some_words)   output  \nstr   The variable  some_words  is of type  str , short for \"string\". Strings hold\nsequences of characters, which can be letters, numbers, punctuation\nor more exotic forms of text (even emoji!).",
            "title": "Strings"
        },
        {
            "location": "/modules/intro/#operators",
            "text": "We can perform mathematical calculations in Python using the basic operators:  +    -    *    /    %    **  2 + 2  # Addition   output  \n4   6 * 7  # Multiplication   output  \n42   2 ** 16  # Power   output  \n65536   13 % 5  # Modulo   output  \n3   # int + int = int\na = 5\na + 1   output  \n6   # float + int = float\nb = 5.0\nb + 1   output  \n6.0   a + b   output  \n10.0   some_words = \"I'm a string\"\na = 6\na + some_words  Outputs:  ---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-1-781eba7cf148> in <module>()\n      1 some_words = \"I'm a string\"\n      2 a = 6\n----> 3 a + some_words\n\nTypeError: unsupported operand type(s) for +: 'int' and 'str'  str(a) + \" \" + some_words   output  \n'5 Python3 strings are Unicode (UTF-8) \u2764\u2764\u2764 \ud83d\ude38 \u86c7'   # Shorthand: operators with assignment\na += 1\na\n\n# Equivalent to:\n# a = a + 1   output  \n6",
            "title": "Operators"
        },
        {
            "location": "/modules/intro/#boolean-operations",
            "text": "We can also use comparison and logic operators: <, >, ==, !=, <=, >=  and statements of identity such as and, or, not . The data type returned by this is\ncalled a  boolean .  3 > 4   output  \nFalse   True and True   output  \nTrue   True or False   output  \nTrue",
            "title": "Boolean operations"
        },
        {
            "location": "/modules/intro/#lists-and-sequence-types",
            "text": "",
            "title": "Lists and sequence types"
        },
        {
            "location": "/modules/intro/#lists",
            "text": "numbers = [2, 4, 6, 8, 10]\nnumbers   output  \n[2, 4, 6, 8, 10]   # `len` get the length of a list\nlen(numbers)   output  \n5   # Lists can contain multiple data types, including other lists\nmixed_list = [\"asdf\", 2, 3.142, numbers, ['a','b','c']]\nmixed_list   output  \n['asdf', 2, 3.142, [2, 4, 6, 8, 10], ['a', 'b', 'c']]   You can retrieve items from a list by their  index . In Python, the first item has an index of 0 (zero).  numbers[0]   output  \n2   numbers[3]   output  \n8   You can also assign a new value to any position in the list.  numbers[3] = numbers[3] * 100\nnumbers   output  \n[2, 4, 6, 800, 10]   You can append items to the end of the list.  numbers.append(12)\nnumbers   output  \n[2, 4, 6, 800, 10, 12]   You can add multiple items to the end of a list with  extend .  numbers.extend([14, 16, 18])\nnumbers   output  \n[2, 4, 6, 800, 10, 12, 14, 16, 18]",
            "title": "Lists"
        },
        {
            "location": "/modules/intro/#loops",
            "text": "A for loop can be used to access the elements in a list or other Python data structure one at a time. We will learn about loops in other lesson.  for num in numbers:\n    print(num)   output  \n2\n4\n6\n800\n10\n12\n14\n16\n18   Indentation  is very important in Python. Note that the second line in the\nexample above is indented, indicating the code that is the body of the loop.  To find out what methods are available for an object, we can use the built-in  help  command:  help(numbers)   output  \nHelp on list object:\n\nclass list(object)\n |  list() -> new empty list\n |  list(iterable) -> new list initialized from iterable's items\n |  \n |  Methods defined here:\n |  \n |  __add__(self, value, /)\n |      Return self+value.\n |  \n |  __contains__(self, key, /)\n |      Return key in self.\n |  \n |  __delitem__(self, key, /)\n |      Delete self[key].\n |  \n |  __eq__(self, value, /)\n |      Return self==value.\n |  \n |  __ge__(self, value, /)\n |      Return self>=value.\n |  \n |  __getattribute__(self, name, /)\n |      Return getattr(self, name).\n |  \n |  __getitem__(...)\n |      x.__getitem__(y)  < ==> x[y]\n |  \n |  __gt__(self, value, /)\n |      Return self>value.\n |  \n |  __iadd__(self, value, /)\n |      Implement self+=value.\n |  \n |  __imul__(self, value, /)\n |      Implement self*=value.\n |  \n |  __init__(self, /, *args, **kwargs)\n |      Initialize self.  See help(type(self)) for accurate signature.\n |  \n |  __iter__(self, /)\n |      Implement iter(self).\n |  \n |  __le__(self, value, /)\n |      Return self < =value.\n |  \n |  __len__(self, /)\n |      Return len(self).\n |  \n |  __lt__(self, value, /)\n |      Return self  None -- append object to end\n |  \n |  clear(...)\n |      L.clear() -> None -- remove all items from L\n |  \n |  copy(...)\n |      L.copy() -> list -- a shallow copy of L\n |  \n |  count(...)\n |      L.count(value) -> integer -- return number of occurrences of value\n |  \n |  extend(...)\n |      L.extend(iterable) -> None -- extend list by appending elements from the iterable\n |  \n |  index(...)\n |      L.index(value, [start, [stop]]) -> integer -- return first index of value.\n |      Raises ValueError if the value is not present.\n |  \n |  insert(...)\n |      L.insert(index, object) -- insert object before index\n |  \n |  pop(...)\n |      L.pop([index]) -> item -- remove and return item at index (default last).\n |      Raises IndexError if list is empty or index is out of range.\n |  \n |  remove(...)\n |      L.remove(value) -> None -- remove first occurrence of value.\n |      Raises ValueError if the value is not present.\n |  \n |  reverse(...)\n |      L.reverse() -- reverse *IN PLACE*\n |  \n |  sort(...)\n |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  __hash__ = None",
            "title": "Loops"
        },
        {
            "location": "/modules/intro/#tuples",
            "text": "A tuple is similar to a list in that it's an ordered sequence of elements.\nHowever, tuples can not be changed once created (they are \"immutable\"). Tuples\nare created by placing comma-separated values inside parentheses  () .  tuples_are_immutable = (\"bar\", 100, 200, \"foo\")\ntuples_are_immutable   output  \n('bar', 100, 200, 'foo')   tuples_are_immutable[1]   output  \n100   tuples_are_immutable[1] = 666  Outputs:  ---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\n<ipython-input-39-c91965b0815a> in <module>()\n----> 1 tuples_are_immutable[1] = 666\n\nTypeError: 'tuple' object does not support item assignment",
            "title": "Tuples"
        },
        {
            "location": "/modules/intro/#challenge-tuples",
            "text": "Define a tuple:  a_tuple = (1, 2, 3)   What happens when you type  a_tuple[2] = 5  vs  a_list[1] = 5  ?  Type  type(a_tuple)  into python - what is the object type?",
            "title": "Challenge - Tuples"
        },
        {
            "location": "/modules/intro/#dictionaries",
            "text": "Dictionaries are a container that store key-value pairs. They are unordered.   Other programming languages might call this a 'hash', 'hashtable' or 'hashmap'.  pairs = {'Apple': 1, 'Orange': 2, 'Pear': 4}\npairs   output  \n{'Apple': 1, 'Orange': 2, 'Pear': 4}   pairs['Orange']   output  \n2   pairs['Orange'] = 16\npairs   output  \n{'Apple': 1, 'Orange': 16, 'Pear': 4}   The  items  method returns a sequence of the key-value pairs as tuples.  values  returns a sequence of just the values.  keys  returns a sequence of just the keys.   In Python 3, the  .items() ,  .values()  and  .keys()  methods return a  'dictionary view' object  that behaves like a list or tuple in for loops but doesn't support indexing. 'Dictionary views' stay in sync even when the dictionary changes.  You can turn them into a normal list or tuple with the  list()  or  tuple()  functions.  pairs.items()\n# list(pairs.items())   output  \ndict_items([('Apple', 1), ('Orange', 16), ('Pear', 4)])   pairs.values()\n# list(pairs.values())   output  \ndict_values([1, 16, 4])   pairs.keys()\n# list(pairs.keys())   output  \ndict_keys(['Apple', 'Orange', 'Pear'])   len(pairs)   output  \n3   dict_of_dicts = {'first': {1:2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}\ndict_of_dicts   output  \n{'first': {1: 2, 2: 4, 4: 8, 8: 16}, 'second': {'a': 2.2, 'b': 4.4}}",
            "title": "Dictionaries"
        },
        {
            "location": "/modules/intro/#challenge-dictionaries",
            "text": "Given the dictionary:  jam_ratings = {'Plum': 6, 'Apricot': 2, 'Strawberry': 8}  How would you change the value associated with the key  Apricot  to  9 .  A)  jam_ratings = {'apricot': 9}  B)  jam_ratings[9] = 'Apricot'  C)  jam_ratings['Apricot'] = 9  D)  jam_ratings[2] = 'Apricot'",
            "title": "Challenge - Dictionaries"
        },
        {
            "location": "/modules/working_with_data/",
            "text": ".output_label {\n    text-align: right;\n    margin: -1em;\n    padding: 0;\n    font-size: 0.5em;\n    color: grey\n}\n\n\n\n\nData Analysis with Python\n\n\n\n\n\n\n\nAutomating data analysis tasks in Python\n\n\nWe can automate the process of performing data manipulations in Python. It's efficient to spend time\nbuilding the code to perform these tasks because once it's built, we can use it\nover and over on different datasets that use a similar format. This makes our\nmethods easily reproducible. We can also easily share our code with colleagues\nand they can replicate the same analysis.\n\n\nThe Dataset\n\n\nFor this lesson, we will be using the Portal Teaching data, a subset of the data\nfrom Ernst et al\n\nLong-term monitoring and experimental manipulation of a Chihuahuan Desert ecosystem near Portal, Arizona, USA\n\n\nWe will be using this dataset, which can be downloaded here: \nsurveys.csv\n ... but \ndon't click\n to download it in your browser - \nwe are going to use Python !\n\n\nimport urllib.request\n# You can also get this URL value by right-clicking the `surveys.csv` link above and selecting \"Copy Link Address\"\nurl = 'https://monashdatafluency.github.io/python-workshop-base/modules/data/surveys.csv'\n# url = 'https://goo.gl/9ZxqBg'  # or a shortened version to save typing\nurllib.request.urlretrieve(url, 'surveys.csv')\n\n\n\n\n\n\noutput\n\n\n\n('surveys.csv', \n)\n\n\n\n\n\n\nIf Jupyter is running locally on your computer, you'll now have a file \nsurveys.csv\n in the current working directory.\nYou can check by clicking on \nFile\n tab on the top left of the notebook to see if the file exists. If you are running Jupyter on a remote server or cloud service (eg Colaboratory or Azure Notebooks), the file will be there instead.\n\n\nWe are studying the species and weight of animals caught in plots in our study\narea. The dataset is stored as a \n.csv\n file: each row holds information for a\nsingle animal, and the columns represent:\n\n\n\n\n\n\n\n\nColumn\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrecord_id\n\n\nUnique id for the observation\n\n\n\n\n\n\nmonth\n\n\nmonth of observation\n\n\n\n\n\n\nday\n\n\nday of observation\n\n\n\n\n\n\nyear\n\n\nyear of observation\n\n\n\n\n\n\nsite_id\n\n\nID of a particular plot\n\n\n\n\n\n\nspecies_id\n\n\n2-letter code\n\n\n\n\n\n\nsex\n\n\nsex of animal (\"M\", \"F\")\n\n\n\n\n\n\nhindfoot_length\n\n\nlength of the hindfoot in mm\n\n\n\n\n\n\nweight\n\n\nweight of the animal in grams\n\n\n\n\n\n\n\n\nThe first few rows of our file look like this:\n\n\nrecord_id,month,day,year,site_id,species_id,sex,hindfoot_length,weight\n1,7,16,1977,2,NL,M,32,\n2,7,16,1977,3,NL,M,33,\n3,7,16,1977,2,DM,F,37,\n4,7,16,1977,7,DM,M,36,\n5,7,16,1977,3,DM,M,35,\n6,7,16,1977,1,PF,M,14,\n7,7,16,1977,2,PE,F,,\n8,7,16,1977,1,DM,M,37,\n9,7,16,1977,1,DM,F,34,\n\n\n\n\n\n\nAbout Libraries\n\n\nA library in Python contains a set of tools (called functions) that perform\ntasks on our data. Importing a library is like getting a piece of lab equipment\nout of a storage locker and setting it up on the bench for use in a project.\nOnce a library is set up, it can be used or called to perform many tasks.\n\n\nIf you have noticed in the previous code \nimport urllib.request\n, we are calling \na \nrequest\n function from library \nurllib\n to download our dataset from web.\n\n\nPandas in Python\n\n\nThe dataset we have, is in table format. One of the best options for working with tabular data in Python is to use the\n\nPython Data Analysis Library\n (a.k.a. Pandas). The\nPandas library provides data structures, produces high quality plots with\n\nmatplotlib\n and integrates nicely with other libraries\nthat use \nNumPy\n (which is another Python library) arrays.\n\n\nFirst, lets make sure the Pandas and matplotlib packages are \ninstalled\n.\n\n\n!pip install pandas matplotlib\n\n\n\n\n\n\noutput\n\n\n\nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: matplotlib in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (2.2.2)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: six>=1.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.11.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.0.1)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (0.10.0)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (2.2.0)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib) (39.1.0)\n\n\n\n\n\n\n\nPython doesn't load all of the libraries available to it by default. We have to\nadd an \nimport\n statement to our code in order to use library functions. To import\na library, we use the syntax \nimport libraryName\n. If we want to give the\nlibrary a nickname to shorten the command, we can add \nas nickNameHere\n.  An\nexample of importing the pandas library using the common nickname \npd\n is below.\n\n\nimport pandas as pd\n\n\n\n\nEach time we call a function that's in a library, we use the syntax\n\nLibraryName.FunctionName\n. Adding the library name with a \n.\n before the\nfunction name tells Python where to find the function. In the example above, we\nhave imported Pandas as \npd\n. This means we don't have to type out \npandas\n each\ntime we call a Pandas function.\n\n\nReading CSV Data Using Pandas\n\n\nWe will begin by locating and reading our survey data which are in CSV format. CSV stands for Comma-Separated Values and is a common way store formatted data. Other symbols my also be used, so you might see tab-separated, colon-separated or space separated files. It is quite easy to replace one separator with another, to match your application. The first line in the file often has headers to explain what is in each column. CSV (and other separators) make it easy to share data, and can be imported and exported from many applications, including Microsoft Excel.\n\n\nWe can use Pandas' \nread_csv\n function to pull the file directly into a\n\nDataFrame\n.\n\n\nSo What's a DataFrame?\n\n\nA DataFrame is a 2-dimensional data structure that can store data of different\ntypes (including characters, integers, floating point values, factors and more)\nin columns. It is similar to a spreadsheet or an SQL table or the \ndata.frame\n in\nR. A DataFrame always has an index (0-based). An index refers to the position of\nan element in the data structure.\n\n\n# Note that pd.read_csv is used because we imported pandas as pd\npd.read_csv(\"data/surveys.csv\")\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nNL\n\n      \nM\n\n      \n33.0\n\n      \nNaN\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nPF\n\n      \nM\n\n      \n14.0\n\n      \nNaN\n\n    \n\n    \n\n      \n6\n\n      \n7\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPE\n\n      \nF\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n7\n\n      \n8\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n8\n\n      \n9\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n9\n\n      \n10\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nPF\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n10\n\n      \n11\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n5\n\n      \nDS\n\n      \nF\n\n      \n53.0\n\n      \nNaN\n\n    \n\n    \n\n      \n11\n\n      \n12\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n12\n\n      \n13\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n13\n\n      \n14\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n8\n\n      \nDM\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n14\n\n      \n15\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n15\n\n      \n16\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n16\n\n      \n17\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n17\n\n      \n18\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPP\n\n      \nM\n\n      \n22.0\n\n      \nNaN\n\n    \n\n    \n\n      \n18\n\n      \n19\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nPF\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n19\n\n      \n20\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n20\n\n      \n21\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n21\n\n      \n22\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nNL\n\n      \nF\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n22\n\n      \n23\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n23\n\n      \n24\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nSH\n\n      \nM\n\n      \n21.0\n\n      \nNaN\n\n    \n\n    \n\n      \n24\n\n      \n25\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n9\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n25\n\n      \n26\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n26\n\n      \n27\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n27\n\n      \n28\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n28\n\n      \n29\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nPP\n\n      \nM\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n29\n\n      \n30\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n10\n\n      \nDS\n\n      \nF\n\n      \n52.0\n\n      \nNaN\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n35519\n\n      \n35520\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nSF\n\n      \nNaN\n\n      \n24.0\n\n      \n36.0\n\n    \n\n    \n\n      \n35520\n\n      \n35521\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n48.0\n\n    \n\n    \n\n      \n35521\n\n      \n35522\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nDM\n\n      \nF\n\n      \n35.0\n\n      \n45.0\n\n    \n\n    \n\n      \n35522\n\n      \n35523\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n44.0\n\n    \n\n    \n\n      \n35523\n\n      \n35524\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nPB\n\n      \nF\n\n      \n25.0\n\n      \n27.0\n\n    \n\n    \n\n      \n35524\n\n      \n35525\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nOL\n\n      \nM\n\n      \n21.0\n\n      \n26.0\n\n    \n\n    \n\n      \n35525\n\n      \n35526\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n8\n\n      \nOT\n\n      \nF\n\n      \n20.0\n\n      \n24.0\n\n    \n\n    \n\n      \n35526\n\n      \n35527\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nDO\n\n      \nF\n\n      \n33.0\n\n      \n43.0\n\n    \n\n    \n\n      \n35527\n\n      \n35528\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35528\n\n      \n35529\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nPB\n\n      \nF\n\n      \n25.0\n\n      \n25.0\n\n    \n\n    \n\n      \n35529\n\n      \n35530\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nOT\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35530\n\n      \n35531\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nPB\n\n      \nF\n\n      \n27.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35531\n\n      \n35532\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \n43.0\n\n    \n\n    \n\n      \n35532\n\n      \n35533\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n48.0\n\n    \n\n    \n\n      \n35533\n\n      \n35534\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n56.0\n\n    \n\n    \n\n      \n35534\n\n      \n35535\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n53.0\n\n    \n\n    \n\n      \n35535\n\n      \n35536\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n35.0\n\n      \n42.0\n\n    \n\n    \n\n      \n35536\n\n      \n35537\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n46.0\n\n    \n\n    \n\n      \n35537\n\n      \n35538\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \n31.0\n\n    \n\n    \n\n      \n35538\n\n      \n35539\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nSF\n\n      \nM\n\n      \n26.0\n\n      \n68.0\n\n    \n\n    \n\n      \n35539\n\n      \n35540\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \n23.0\n\n    \n\n    \n\n      \n35540\n\n      \n35541\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n24.0\n\n      \n31.0\n\n    \n\n    \n\n      \n35541\n\n      \n35542\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \n29.0\n\n    \n\n    \n\n      \n35542\n\n      \n35543\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n27.0\n\n      \n34.0\n\n    \n\n    \n\n      \n35543\n\n      \n35544\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35544\n\n      \n35545\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35545\n\n      \n35546\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35546\n\n      \n35547\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n10\n\n      \nRM\n\n      \nF\n\n      \n15.0\n\n      \n14.0\n\n    \n\n    \n\n      \n35547\n\n      \n35548\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n7\n\n      \nDO\n\n      \nM\n\n      \n36.0\n\n      \n51.0\n\n    \n\n    \n\n      \n35548\n\n      \n35549\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n5\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n35549 rows \u00d7 9 columns\n\n\n\n\n\nThe above command outputs a \nDateFrame\n object, which Jupyter displays as a table (snipped in the middle since there are many rows).\n\n\nWe can see that there were 33,549 rows parsed. Each row has 9\ncolumns. The first column is the index of the DataFrame. The index is used to\nidentify the position of the data, but it is not an actual column of the DataFrame.\nIt looks like  the \nread_csv\n function in Pandas  read our file properly. However,\nwe haven't saved any data to memory so we can work with it.We need to assign the\nDataFrame to a variable. Remember that a variable is a name for a value, such as \nx\n,\nor \ndata\n. We can create a new  object with a variable name by assigning a value to it using \n=\n.\n\n\nLet's call the imported survey data \nsurveys_df\n:\n\n\nsurveys_df = pd.read_csv(\"data/surveys.csv\")\n\n\n\n\nNotice when you assign the imported DataFrame to a variable, Python does not\nproduce any output on the screen. We can view the value of the \nsurveys_df\n\nobject by typing its name into the cell.\n\n\nsurveys_df\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nNL\n\n      \nM\n\n      \n33.0\n\n      \nNaN\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nPF\n\n      \nM\n\n      \n14.0\n\n      \nNaN\n\n    \n\n    \n\n      \n6\n\n      \n7\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPE\n\n      \nF\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n7\n\n      \n8\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n8\n\n      \n9\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n9\n\n      \n10\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nPF\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n10\n\n      \n11\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n5\n\n      \nDS\n\n      \nF\n\n      \n53.0\n\n      \nNaN\n\n    \n\n    \n\n      \n11\n\n      \n12\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n12\n\n      \n13\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n13\n\n      \n14\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n8\n\n      \nDM\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n14\n\n      \n15\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n15\n\n      \n16\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n16\n\n      \n17\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n17\n\n      \n18\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPP\n\n      \nM\n\n      \n22.0\n\n      \nNaN\n\n    \n\n    \n\n      \n18\n\n      \n19\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nPF\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n19\n\n      \n20\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n20\n\n      \n21\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n21\n\n      \n22\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nNL\n\n      \nF\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n22\n\n      \n23\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n23\n\n      \n24\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nSH\n\n      \nM\n\n      \n21.0\n\n      \nNaN\n\n    \n\n    \n\n      \n24\n\n      \n25\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n9\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n25\n\n      \n26\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n26\n\n      \n27\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n27\n\n      \n28\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n28\n\n      \n29\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nPP\n\n      \nM\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n29\n\n      \n30\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n10\n\n      \nDS\n\n      \nF\n\n      \n52.0\n\n      \nNaN\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n35519\n\n      \n35520\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nSF\n\n      \nNaN\n\n      \n24.0\n\n      \n36.0\n\n    \n\n    \n\n      \n35520\n\n      \n35521\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n48.0\n\n    \n\n    \n\n      \n35521\n\n      \n35522\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nDM\n\n      \nF\n\n      \n35.0\n\n      \n45.0\n\n    \n\n    \n\n      \n35522\n\n      \n35523\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n44.0\n\n    \n\n    \n\n      \n35523\n\n      \n35524\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nPB\n\n      \nF\n\n      \n25.0\n\n      \n27.0\n\n    \n\n    \n\n      \n35524\n\n      \n35525\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nOL\n\n      \nM\n\n      \n21.0\n\n      \n26.0\n\n    \n\n    \n\n      \n35525\n\n      \n35526\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n8\n\n      \nOT\n\n      \nF\n\n      \n20.0\n\n      \n24.0\n\n    \n\n    \n\n      \n35526\n\n      \n35527\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nDO\n\n      \nF\n\n      \n33.0\n\n      \n43.0\n\n    \n\n    \n\n      \n35527\n\n      \n35528\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35528\n\n      \n35529\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nPB\n\n      \nF\n\n      \n25.0\n\n      \n25.0\n\n    \n\n    \n\n      \n35529\n\n      \n35530\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nOT\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35530\n\n      \n35531\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nPB\n\n      \nF\n\n      \n27.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35531\n\n      \n35532\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \n43.0\n\n    \n\n    \n\n      \n35532\n\n      \n35533\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n48.0\n\n    \n\n    \n\n      \n35533\n\n      \n35534\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n56.0\n\n    \n\n    \n\n      \n35534\n\n      \n35535\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n53.0\n\n    \n\n    \n\n      \n35535\n\n      \n35536\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n35.0\n\n      \n42.0\n\n    \n\n    \n\n      \n35536\n\n      \n35537\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n46.0\n\n    \n\n    \n\n      \n35537\n\n      \n35538\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \n31.0\n\n    \n\n    \n\n      \n35538\n\n      \n35539\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nSF\n\n      \nM\n\n      \n26.0\n\n      \n68.0\n\n    \n\n    \n\n      \n35539\n\n      \n35540\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \n23.0\n\n    \n\n    \n\n      \n35540\n\n      \n35541\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n24.0\n\n      \n31.0\n\n    \n\n    \n\n      \n35541\n\n      \n35542\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \n29.0\n\n    \n\n    \n\n      \n35542\n\n      \n35543\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n27.0\n\n      \n34.0\n\n    \n\n    \n\n      \n35543\n\n      \n35544\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35544\n\n      \n35545\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35545\n\n      \n35546\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35546\n\n      \n35547\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n10\n\n      \nRM\n\n      \nF\n\n      \n15.0\n\n      \n14.0\n\n    \n\n    \n\n      \n35547\n\n      \n35548\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n7\n\n      \nDO\n\n      \nM\n\n      \n36.0\n\n      \n51.0\n\n    \n\n    \n\n      \n35548\n\n      \n35549\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n5\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n35549 rows \u00d7 9 columns\n\n\n\n\n\nwhich prints contents like above.\n\n\nYou can also select just a few rows, so it is easier to fit on one window, you can see that pandas has neatly formatted the data to fit our screen.\n\n\nHere, we will be using a function called \nhead\n.\n\n\nThe \nhead()\n function displays the first several lines of a file. It is discussed below.\n\n\nsurveys_df.head()\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nNL\n\n      \nM\n\n      \n33.0\n\n      \nNaN\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\nExploring Our Species Survey Data\n\n\nAgain, we can use the \ntype\n function to see what kind of thing \nsurveys_df\n is:\n\n\ntype(surveys_df)\n\n\n\n\n\n\noutput\n\n\n\npandas.core.frame.DataFrame\n\n\n\n\n\n\nAs expected, it's a DataFrame (or, to use the full name that Python uses to refer\nto it internally, a \npandas.core.frame.DataFrame\n).\n\n\nWhat kind of things does \nsurveys_df\n contain? DataFrames have an attribute\ncalled \ndtypes\n that answers this:\n\n\nsurveys_df.dtypes\n\n\n\n\n\n\noutput\n\n\n\nrecord_id            int64\nmonth                int64\nday                  int64\nyear                 int64\nsite_id              int64\nspecies_id          object\nsex                 object\nhindfoot_length    float64\nweight             float64\ndtype: object\n\n\n\n\n\n\nAll the values in a single column have the same type. For example, months have type\n\nint64\n, which is a kind of integer. Cells in the month column cannot have\nfractional values, but the weight and hindfoot_length columns can, because they\nhave type \nfloat64\n. The \nobject\n type doesn't have a very helpful name, but in\nthis case it represents strings (such as 'M' and 'F' in the case of sex).\n\n\nUseful Ways to View DataFrame objects in Python\n\n\nThere are many ways to summarize and access the data stored in DataFrames,\nusing attributes and methods provided by the DataFrame object.\n\n\nTo access an attribute, use the DataFrame object name followed by the attribute\nname \ndf_object.attribute\n. Using the DataFrame \nsurveys_df\n and attribute\n\ncolumns\n, an index of all the column names in the DataFrame can be accessed\nwith \nsurveys_df.columns\n.\n\n\nMethods are called in a similar fashion using the syntax \ndf_object.method()\n.\nAs an example, \nsurveys_df.head()\n gets the first few rows in the DataFrame\n\nsurveys_df\n using \nthe \nhead()\n method\n. With a method, we can supply extra\ninformation in the parens to control behaviour.\n\n\nLet's look at the data using these.\n\n\nChallenge - DataFrames\n\n\nUsing our DataFrame \nsurveys_df\n, try out the attributes & methods below to see\nwhat they return.\n\n\n\n\nsurveys_df.columns\n\n\nsurveys_df.shape\n Take note of the output of \nshape\n - what format does it\n   return the shape of the DataFrame in?   HINT: \nMore on tuples, here\n.\n\n\nsurveys_df.head()\n Also, what does \nsurveys_df.head(15)\n do?\n\n\nsurveys_df.tail()\n\n\n\n\n\n\n\nCalculating Statistics From Data\n\n\nWe've read our data into Python. Next, let's perform some quick summary\nstatistics to learn more about the data that we're working with. We might want\nto know how many animals were collected in each plot, or how many of each\nspecies were caught. We can perform summary stats quickly using groups. But\nfirst we need to figure out what we want to group by.\n\n\nLet's begin by exploring our data:\n\n\n# Look at the column names\nsurveys_df.columns\n\n\n\n\n\n\noutput\n\n\n\nIndex(['record_id', 'month', 'day', 'year', 'site_id', 'species_id', 'sex',\n       'hindfoot_length', 'weight'],\n      dtype='object')\n\n\n\n\n\n\nLet's get a list of all the species. The \npd.unique\n function tells us all of\nthe unique values in the \nspecies_id\n column.\n\n\npd.unique(surveys_df['species_id'])\n\n\n\n\n\n\noutput\n\n\n\narray(['NL', 'DM', 'PF', 'PE', 'DS', 'PP', 'SH', 'OT', 'DO', 'OX', 'SS',\n       'OL', 'RM', nan, 'SA', 'PM', 'AH', 'DX', 'AB', 'CB', 'CM', 'CQ',\n       'RF', 'PC', 'PG', 'PH', 'PU', 'CV', 'UR', 'UP', 'ZL', 'UL', 'CS',\n       'SC', 'BA', 'SF', 'RO', 'AS', 'SO', 'PI', 'ST', 'CU', 'SU', 'RX',\n       'PB', 'PL', 'PX', 'CT', 'US'], dtype=object)\n\n\n\n\n\n\nChallenge - Statistics\n\n\n\n\n\n\nCreate a list of unique site ID's found in the surveys data. Call it\n  \nsite_names\n. How many unique sites are there in the data? How many unique\n  species are in the data?\n\n\n\n\n\n\nWhat is the difference between \nlen(site_names)\n and \nsurveys_df['site_id'].nunique()\n?\n\n\n\n\n\n\n\n\n\n\n\n\nGroups in Pandas\n\n\nWe often want to calculate summary statistics grouped by subsets or attributes\nwithin fields of our data. For example, we might want to calculate the average\nweight of all individuals per site.\n\n\nWe can calculate basic statistics for all records in a single column using the\nsyntax below:\n\n\nsurveys_df['weight'].describe()\n\n\n\n\n\n\noutput\n\n\n\ncount    32283.000000\nmean        42.672428\nstd         36.631259\nmin          4.000000\n25%         20.000000\n50%         37.000000\n75%         48.000000\nmax        280.000000\nName: weight, dtype: float64\n\n\n\n\n\n\nWe can also extract one specific metric if we wish:\n\n\nsurveys_df['weight'].min()\nsurveys_df['weight'].max()\nsurveys_df['weight'].mean()\nsurveys_df['weight'].std()\n# only the last command shows output below - you can try the others above in new cells\nsurveys_df['weight'].count()\n\n\n\n\n\n\noutput\n\n\n\n32283\n\n\n\n\n\n\nBut if we want to summarize by one or more variables, for example sex, we can\nuse \nPandas' \n.groupby\n method\n. Once we've created a groupby DataFrame, we\ncan quickly calculate summary statistics by a group of our choice.\n\n\n# Group data by sex\ngrouped_data = surveys_df.groupby('sex')\n\n\n\n\nThe \npandas function \ndescribe\n will return descriptive stats including: mean,\nmedian, max, min, std and count for a particular column in the data. \nNote\n Pandas'\n\ndescribe\n function will only return summary values for columns containing\nnumeric data.\n\n\n# Summary statistics for all numeric columns by sex\ngrouped_data.describe()\n\n# Provide the mean for each numeric column by sex\n# As above, only the last command shows output below - you can try the others above in new cells\ngrouped_data.mean()\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n    \n\n      \nsex\n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n      \n\n    \n\n  \n\n  \n\n    \n\n      \nF\n\n      \n18036.412046\n\n      \n6.583047\n\n      \n16.007138\n\n      \n1990.644997\n\n      \n11.440854\n\n      \n28.836780\n\n      \n42.170555\n\n    \n\n    \n\n      \nM\n\n      \n17754.835601\n\n      \n6.392668\n\n      \n16.184286\n\n      \n1990.480401\n\n      \n11.098282\n\n      \n29.709578\n\n      \n42.995379\n\n    \n\n  \n\n\n\n\n\n\n\nThe \ngroupby\n command is powerful in that it allows us to quickly generate\nsummary stats.\n\n\nChallenge - Summary Data\n\n\n\n\n\n\nHow many recorded individuals are female \nF\n and how many male \nM\n\n\n\n\nA) 17348 and 15690\n\n\nB) 14894 and 16476\n\n\nC) 15303 and 16879\n\n\nD) 15690 and 17348\n\n\n\n\n\n\n\n\nWhat happens when you group by two columns using the following syntax and\n    then grab mean values:\n\n\n\n\ngrouped_data2 = surveys_df.groupby(['site_id','sex'])\n\n\ngrouped_data2.mean()\n\n\n\n\n\n\n\n\nSummarize weight values for each site in your data. HINT: you can use the\n  following syntax to only create summary statistics for one column in your data\n  \nby_site['weight'].describe()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuickly Creating Summary Counts in Pandas\n\n\nLet's next count the number of samples for each species. We can do this in a few\nways, but we'll use \ngroupby\n combined with \na \ncount()\n method\n.\n\n\n# Count the number of samples by species\nspecies_counts = surveys_df.groupby('species_id')['record_id'].count()\nprint(species_counts)\n\n\n\n\n\n\noutput\n\n\n\nspecies_id\nAB      303\nAH      437\nAS        2\nBA       46\nCB       50\nCM       13\nCQ       16\nCS        1\nCT        1\nCU        1\nCV        1\nDM    10596\nDO     3027\nDS     2504\nDX       40\nNL     1252\nOL     1006\nOT     2249\nOX       12\nPB     2891\nPC       39\nPE     1299\nPF     1597\nPG        8\nPH       32\nPI        9\nPL       36\nPM      899\nPP     3123\nPU        5\nPX        6\nRF       75\nRM     2609\nRO        8\nRX        2\nSA       75\nSC        1\nSF       43\nSH      147\nSO       43\nSS      248\nST        1\nSU        5\nUL        4\nUP        8\nUR       10\nUS        4\nZL        2\nName: record_id, dtype: int64\n\n\n\n\n\n\n\nOr, we can also count just the rows that have the species \"DO\":\n\n\nsurveys_df.groupby('species_id')['record_id'].count()['DO']\n\n\n\n\n\n\noutput\n\n\n\n3027\n\n\n\n\n\n\nBasic Math Functions\n\n\nIf we wanted to, we could perform math on an entire column of our data. For\nexample let's multiply all weight values by 2. A more practical use of this might\nbe to normalize the data according to a mean, area, or some other value\ncalculated from our data.\n\n\n# Multiply all weight values by 2 but does not change the original weight data\nsurveys_df['weight']*2\n\n\n\n\n\n\noutput\n\n\n\n0          NaN\n1          NaN\n2          NaN\n3          NaN\n4          NaN\n5          NaN\n6          NaN\n7          NaN\n8          NaN\n9          NaN\n10         NaN\n11         NaN\n12         NaN\n13         NaN\n14         NaN\n15         NaN\n16         NaN\n17         NaN\n18         NaN\n19         NaN\n20         NaN\n21         NaN\n22         NaN\n23         NaN\n24         NaN\n25         NaN\n26         NaN\n27         NaN\n28         NaN\n29         NaN\n         ...  \n35519     72.0\n35520     96.0\n35521     90.0\n35522     88.0\n35523     54.0\n35524     52.0\n35525     48.0\n35526     86.0\n35527      NaN\n35528     50.0\n35529      NaN\n35530      NaN\n35531     86.0\n35532     96.0\n35533    112.0\n35534    106.0\n35535     84.0\n35536     92.0\n35537     62.0\n35538    136.0\n35539     46.0\n35540     62.0\n35541     58.0\n35542     68.0\n35543      NaN\n35544      NaN\n35545      NaN\n35546     28.0\n35547    102.0\n35548      NaN\nName: weight, Length: 35549, dtype: float64\n\n\n\n\n\n\nQuick & Easy Plotting Data Using Pandas\n\n\nWe can plot our summary stats using Pandas, too.\n\n\n## To make sure figures appear inside Jupyter Notebook\n%matplotlib inline\n\n# Create a quick bar chart\nspecies_counts.plot(kind='bar');\n\n\n\n\n\n\nAnimals per site plot\n\n\nWe can also look at how many animals were captured in each site.\n\n\ntotal_count = surveys_df.groupby('site_id')['record_id'].nunique()\n# Let's plot that too\ntotal_count.plot(kind='bar')\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtra Plotting Challenge\n\n\n\n\n\n\nCreate a plot of average weight across all species per plot.\n\n\n\n\n\n\nCreate a plot of total males versus total females for the entire dataset.\n\n\n\n\n\n\nCreate a stacked bar plot, with weight on the Y axis, and the stacked variable being sex. The plot should show total weight by sex for each plot. Some tips are below to help you solve this challenge:\n\nFor more on Pandas plots, visit this link.",
            "title": "Working with Data"
        },
        {
            "location": "/modules/working_with_data/#data-analysis-with-python",
            "text": "",
            "title": "Data Analysis with Python"
        },
        {
            "location": "/modules/working_with_data/#automating-data-analysis-tasks-in-python",
            "text": "We can automate the process of performing data manipulations in Python. It's efficient to spend time\nbuilding the code to perform these tasks because once it's built, we can use it\nover and over on different datasets that use a similar format. This makes our\nmethods easily reproducible. We can also easily share our code with colleagues\nand they can replicate the same analysis.",
            "title": "Automating data analysis tasks in Python"
        },
        {
            "location": "/modules/working_with_data/#the-dataset",
            "text": "For this lesson, we will be using the Portal Teaching data, a subset of the data\nfrom Ernst et al Long-term monitoring and experimental manipulation of a Chihuahuan Desert ecosystem near Portal, Arizona, USA  We will be using this dataset, which can be downloaded here:  surveys.csv  ... but  don't click  to download it in your browser -  we are going to use Python !  import urllib.request\n# You can also get this URL value by right-clicking the `surveys.csv` link above and selecting \"Copy Link Address\"\nurl = 'https://monashdatafluency.github.io/python-workshop-base/modules/data/surveys.csv'\n# url = 'https://goo.gl/9ZxqBg'  # or a shortened version to save typing\nurllib.request.urlretrieve(url, 'surveys.csv')   output  \n('surveys.csv',  )   If Jupyter is running locally on your computer, you'll now have a file  surveys.csv  in the current working directory.\nYou can check by clicking on  File  tab on the top left of the notebook to see if the file exists. If you are running Jupyter on a remote server or cloud service (eg Colaboratory or Azure Notebooks), the file will be there instead.  We are studying the species and weight of animals caught in plots in our study\narea. The dataset is stored as a  .csv  file: each row holds information for a\nsingle animal, and the columns represent:     Column  Description      record_id  Unique id for the observation    month  month of observation    day  day of observation    year  year of observation    site_id  ID of a particular plot    species_id  2-letter code    sex  sex of animal (\"M\", \"F\")    hindfoot_length  length of the hindfoot in mm    weight  weight of the animal in grams     The first few rows of our file look like this:  record_id,month,day,year,site_id,species_id,sex,hindfoot_length,weight\n1,7,16,1977,2,NL,M,32,\n2,7,16,1977,3,NL,M,33,\n3,7,16,1977,2,DM,F,37,\n4,7,16,1977,7,DM,M,36,\n5,7,16,1977,3,DM,M,35,\n6,7,16,1977,1,PF,M,14,\n7,7,16,1977,2,PE,F,,\n8,7,16,1977,1,DM,M,37,\n9,7,16,1977,1,DM,F,34,",
            "title": "The Dataset"
        },
        {
            "location": "/modules/working_with_data/#about-libraries",
            "text": "A library in Python contains a set of tools (called functions) that perform\ntasks on our data. Importing a library is like getting a piece of lab equipment\nout of a storage locker and setting it up on the bench for use in a project.\nOnce a library is set up, it can be used or called to perform many tasks.  If you have noticed in the previous code  import urllib.request , we are calling \na  request  function from library  urllib  to download our dataset from web.",
            "title": "About Libraries"
        },
        {
            "location": "/modules/working_with_data/#pandas-in-python",
            "text": "The dataset we have, is in table format. One of the best options for working with tabular data in Python is to use the Python Data Analysis Library  (a.k.a. Pandas). The\nPandas library provides data structures, produces high quality plots with matplotlib  and integrates nicely with other libraries\nthat use  NumPy  (which is another Python library) arrays.  First, lets make sure the Pandas and matplotlib packages are  installed .  !pip install pandas matplotlib   output  \nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: matplotlib in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (2.2.2)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: six>=1.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.11.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.0.1)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (0.10.0)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (2.2.0)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib) (39.1.0)   Python doesn't load all of the libraries available to it by default. We have to\nadd an  import  statement to our code in order to use library functions. To import\na library, we use the syntax  import libraryName . If we want to give the\nlibrary a nickname to shorten the command, we can add  as nickNameHere .  An\nexample of importing the pandas library using the common nickname  pd  is below.  import pandas as pd  Each time we call a function that's in a library, we use the syntax LibraryName.FunctionName . Adding the library name with a  .  before the\nfunction name tells Python where to find the function. In the example above, we\nhave imported Pandas as  pd . This means we don't have to type out  pandas  each\ntime we call a Pandas function.",
            "title": "Pandas in Python"
        },
        {
            "location": "/modules/working_with_data/#reading-csv-data-using-pandas",
            "text": "We will begin by locating and reading our survey data which are in CSV format. CSV stands for Comma-Separated Values and is a common way store formatted data. Other symbols my also be used, so you might see tab-separated, colon-separated or space separated files. It is quite easy to replace one separator with another, to match your application. The first line in the file often has headers to explain what is in each column. CSV (and other separators) make it easy to share data, and can be imported and exported from many applications, including Microsoft Excel.  We can use Pandas'  read_csv  function to pull the file directly into a DataFrame .",
            "title": "Reading CSV Data Using Pandas"
        },
        {
            "location": "/modules/working_with_data/#so-whats-a-dataframe",
            "text": "A DataFrame is a 2-dimensional data structure that can store data of different\ntypes (including characters, integers, floating point values, factors and more)\nin columns. It is similar to a spreadsheet or an SQL table or the  data.frame  in\nR. A DataFrame always has an index (0-based). An index refers to the position of\nan element in the data structure.  # Note that pd.read_csv is used because we imported pandas as pd\npd.read_csv(\"data/surveys.csv\")   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       1 \n       2 \n       7 \n       16 \n       1977 \n       3 \n       NL \n       M \n       33.0 \n       NaN \n     \n     \n       2 \n       3 \n       7 \n       16 \n       1977 \n       2 \n       DM \n       F \n       37.0 \n       NaN \n     \n     \n       3 \n       4 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       4 \n       5 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       5 \n       6 \n       7 \n       16 \n       1977 \n       1 \n       PF \n       M \n       14.0 \n       NaN \n     \n     \n       6 \n       7 \n       7 \n       16 \n       1977 \n       2 \n       PE \n       F \n       NaN \n       NaN \n     \n     \n       7 \n       8 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       M \n       37.0 \n       NaN \n     \n     \n       8 \n       9 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       9 \n       10 \n       7 \n       16 \n       1977 \n       6 \n       PF \n       F \n       20.0 \n       NaN \n     \n     \n       10 \n       11 \n       7 \n       16 \n       1977 \n       5 \n       DS \n       F \n       53.0 \n       NaN \n     \n     \n       11 \n       12 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       12 \n       13 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       13 \n       14 \n       7 \n       16 \n       1977 \n       8 \n       DM \n       NaN \n       NaN \n       NaN \n     \n     \n       14 \n       15 \n       7 \n       16 \n       1977 \n       6 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       15 \n       16 \n       7 \n       16 \n       1977 \n       4 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       16 \n       17 \n       7 \n       16 \n       1977 \n       3 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       17 \n       18 \n       7 \n       16 \n       1977 \n       2 \n       PP \n       M \n       22.0 \n       NaN \n     \n     \n       18 \n       19 \n       7 \n       16 \n       1977 \n       4 \n       PF \n       NaN \n       NaN \n       NaN \n     \n     \n       19 \n       20 \n       7 \n       17 \n       1977 \n       11 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       20 \n       21 \n       7 \n       17 \n       1977 \n       14 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       21 \n       22 \n       7 \n       17 \n       1977 \n       15 \n       NL \n       F \n       31.0 \n       NaN \n     \n     \n       22 \n       23 \n       7 \n       17 \n       1977 \n       13 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       23 \n       24 \n       7 \n       17 \n       1977 \n       13 \n       SH \n       M \n       21.0 \n       NaN \n     \n     \n       24 \n       25 \n       7 \n       17 \n       1977 \n       9 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       25 \n       26 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       31.0 \n       NaN \n     \n     \n       26 \n       27 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       27 \n       28 \n       7 \n       17 \n       1977 \n       11 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       28 \n       29 \n       7 \n       17 \n       1977 \n       11 \n       PP \n       M \n       NaN \n       NaN \n     \n     \n       29 \n       30 \n       7 \n       17 \n       1977 \n       10 \n       DS \n       F \n       52.0 \n       NaN \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       35519 \n       35520 \n       12 \n       31 \n       2002 \n       9 \n       SF \n       NaN \n       24.0 \n       36.0 \n     \n     \n       35520 \n       35521 \n       12 \n       31 \n       2002 \n       9 \n       DM \n       M \n       37.0 \n       48.0 \n     \n     \n       35521 \n       35522 \n       12 \n       31 \n       2002 \n       9 \n       DM \n       F \n       35.0 \n       45.0 \n     \n     \n       35522 \n       35523 \n       12 \n       31 \n       2002 \n       9 \n       DM \n       F \n       36.0 \n       44.0 \n     \n     \n       35523 \n       35524 \n       12 \n       31 \n       2002 \n       9 \n       PB \n       F \n       25.0 \n       27.0 \n     \n     \n       35524 \n       35525 \n       12 \n       31 \n       2002 \n       9 \n       OL \n       M \n       21.0 \n       26.0 \n     \n     \n       35525 \n       35526 \n       12 \n       31 \n       2002 \n       8 \n       OT \n       F \n       20.0 \n       24.0 \n     \n     \n       35526 \n       35527 \n       12 \n       31 \n       2002 \n       13 \n       DO \n       F \n       33.0 \n       43.0 \n     \n     \n       35527 \n       35528 \n       12 \n       31 \n       2002 \n       13 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35528 \n       35529 \n       12 \n       31 \n       2002 \n       13 \n       PB \n       F \n       25.0 \n       25.0 \n     \n     \n       35529 \n       35530 \n       12 \n       31 \n       2002 \n       13 \n       OT \n       F \n       20.0 \n       NaN \n     \n     \n       35530 \n       35531 \n       12 \n       31 \n       2002 \n       13 \n       PB \n       F \n       27.0 \n       NaN \n     \n     \n       35531 \n       35532 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       34.0 \n       43.0 \n     \n     \n       35532 \n       35533 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       36.0 \n       48.0 \n     \n     \n       35533 \n       35534 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       M \n       37.0 \n       56.0 \n     \n     \n       35534 \n       35535 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       M \n       37.0 \n       53.0 \n     \n     \n       35535 \n       35536 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       35.0 \n       42.0 \n     \n     \n       35536 \n       35537 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       36.0 \n       46.0 \n     \n     \n       35537 \n       35538 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       26.0 \n       31.0 \n     \n     \n       35538 \n       35539 \n       12 \n       31 \n       2002 \n       15 \n       SF \n       M \n       26.0 \n       68.0 \n     \n     \n       35539 \n       35540 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       26.0 \n       23.0 \n     \n     \n       35540 \n       35541 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       24.0 \n       31.0 \n     \n     \n       35541 \n       35542 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       26.0 \n       29.0 \n     \n     \n       35542 \n       35543 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       27.0 \n       34.0 \n     \n     \n       35543 \n       35544 \n       12 \n       31 \n       2002 \n       15 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35544 \n       35545 \n       12 \n       31 \n       2002 \n       15 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35545 \n       35546 \n       12 \n       31 \n       2002 \n       15 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35546 \n       35547 \n       12 \n       31 \n       2002 \n       10 \n       RM \n       F \n       15.0 \n       14.0 \n     \n     \n       35547 \n       35548 \n       12 \n       31 \n       2002 \n       7 \n       DO \n       M \n       36.0 \n       51.0 \n     \n     \n       35548 \n       35549 \n       12 \n       31 \n       2002 \n       5 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     35549 rows \u00d7 9 columns   The above command outputs a  DateFrame  object, which Jupyter displays as a table (snipped in the middle since there are many rows).  We can see that there were 33,549 rows parsed. Each row has 9\ncolumns. The first column is the index of the DataFrame. The index is used to\nidentify the position of the data, but it is not an actual column of the DataFrame.\nIt looks like  the  read_csv  function in Pandas  read our file properly. However,\nwe haven't saved any data to memory so we can work with it.We need to assign the\nDataFrame to a variable. Remember that a variable is a name for a value, such as  x ,\nor  data . We can create a new  object with a variable name by assigning a value to it using  = .  Let's call the imported survey data  surveys_df :  surveys_df = pd.read_csv(\"data/surveys.csv\")  Notice when you assign the imported DataFrame to a variable, Python does not\nproduce any output on the screen. We can view the value of the  surveys_df \nobject by typing its name into the cell.  surveys_df   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       1 \n       2 \n       7 \n       16 \n       1977 \n       3 \n       NL \n       M \n       33.0 \n       NaN \n     \n     \n       2 \n       3 \n       7 \n       16 \n       1977 \n       2 \n       DM \n       F \n       37.0 \n       NaN \n     \n     \n       3 \n       4 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       4 \n       5 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       5 \n       6 \n       7 \n       16 \n       1977 \n       1 \n       PF \n       M \n       14.0 \n       NaN \n     \n     \n       6 \n       7 \n       7 \n       16 \n       1977 \n       2 \n       PE \n       F \n       NaN \n       NaN \n     \n     \n       7 \n       8 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       M \n       37.0 \n       NaN \n     \n     \n       8 \n       9 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       9 \n       10 \n       7 \n       16 \n       1977 \n       6 \n       PF \n       F \n       20.0 \n       NaN \n     \n     \n       10 \n       11 \n       7 \n       16 \n       1977 \n       5 \n       DS \n       F \n       53.0 \n       NaN \n     \n     \n       11 \n       12 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       12 \n       13 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       13 \n       14 \n       7 \n       16 \n       1977 \n       8 \n       DM \n       NaN \n       NaN \n       NaN \n     \n     \n       14 \n       15 \n       7 \n       16 \n       1977 \n       6 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       15 \n       16 \n       7 \n       16 \n       1977 \n       4 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       16 \n       17 \n       7 \n       16 \n       1977 \n       3 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       17 \n       18 \n       7 \n       16 \n       1977 \n       2 \n       PP \n       M \n       22.0 \n       NaN \n     \n     \n       18 \n       19 \n       7 \n       16 \n       1977 \n       4 \n       PF \n       NaN \n       NaN \n       NaN \n     \n     \n       19 \n       20 \n       7 \n       17 \n       1977 \n       11 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       20 \n       21 \n       7 \n       17 \n       1977 \n       14 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       21 \n       22 \n       7 \n       17 \n       1977 \n       15 \n       NL \n       F \n       31.0 \n       NaN \n     \n     \n       22 \n       23 \n       7 \n       17 \n       1977 \n       13 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       23 \n       24 \n       7 \n       17 \n       1977 \n       13 \n       SH \n       M \n       21.0 \n       NaN \n     \n     \n       24 \n       25 \n       7 \n       17 \n       1977 \n       9 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       25 \n       26 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       31.0 \n       NaN \n     \n     \n       26 \n       27 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       27 \n       28 \n       7 \n       17 \n       1977 \n       11 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       28 \n       29 \n       7 \n       17 \n       1977 \n       11 \n       PP \n       M \n       NaN \n       NaN \n     \n     \n       29 \n       30 \n       7 \n       17 \n       1977 \n       10 \n       DS \n       F \n       52.0 \n       NaN \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       35519 \n       35520 \n       12 \n       31 \n       2002 \n       9 \n       SF \n       NaN \n       24.0 \n       36.0 \n     \n     \n       35520 \n       35521 \n       12 \n       31 \n       2002 \n       9 \n       DM \n       M \n       37.0 \n       48.0 \n     \n     \n       35521 \n       35522 \n       12 \n       31 \n       2002 \n       9 \n       DM \n       F \n       35.0 \n       45.0 \n     \n     \n       35522 \n       35523 \n       12 \n       31 \n       2002 \n       9 \n       DM \n       F \n       36.0 \n       44.0 \n     \n     \n       35523 \n       35524 \n       12 \n       31 \n       2002 \n       9 \n       PB \n       F \n       25.0 \n       27.0 \n     \n     \n       35524 \n       35525 \n       12 \n       31 \n       2002 \n       9 \n       OL \n       M \n       21.0 \n       26.0 \n     \n     \n       35525 \n       35526 \n       12 \n       31 \n       2002 \n       8 \n       OT \n       F \n       20.0 \n       24.0 \n     \n     \n       35526 \n       35527 \n       12 \n       31 \n       2002 \n       13 \n       DO \n       F \n       33.0 \n       43.0 \n     \n     \n       35527 \n       35528 \n       12 \n       31 \n       2002 \n       13 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35528 \n       35529 \n       12 \n       31 \n       2002 \n       13 \n       PB \n       F \n       25.0 \n       25.0 \n     \n     \n       35529 \n       35530 \n       12 \n       31 \n       2002 \n       13 \n       OT \n       F \n       20.0 \n       NaN \n     \n     \n       35530 \n       35531 \n       12 \n       31 \n       2002 \n       13 \n       PB \n       F \n       27.0 \n       NaN \n     \n     \n       35531 \n       35532 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       34.0 \n       43.0 \n     \n     \n       35532 \n       35533 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       36.0 \n       48.0 \n     \n     \n       35533 \n       35534 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       M \n       37.0 \n       56.0 \n     \n     \n       35534 \n       35535 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       M \n       37.0 \n       53.0 \n     \n     \n       35535 \n       35536 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       35.0 \n       42.0 \n     \n     \n       35536 \n       35537 \n       12 \n       31 \n       2002 \n       14 \n       DM \n       F \n       36.0 \n       46.0 \n     \n     \n       35537 \n       35538 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       26.0 \n       31.0 \n     \n     \n       35538 \n       35539 \n       12 \n       31 \n       2002 \n       15 \n       SF \n       M \n       26.0 \n       68.0 \n     \n     \n       35539 \n       35540 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       26.0 \n       23.0 \n     \n     \n       35540 \n       35541 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       24.0 \n       31.0 \n     \n     \n       35541 \n       35542 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       26.0 \n       29.0 \n     \n     \n       35542 \n       35543 \n       12 \n       31 \n       2002 \n       15 \n       PB \n       F \n       27.0 \n       34.0 \n     \n     \n       35543 \n       35544 \n       12 \n       31 \n       2002 \n       15 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35544 \n       35545 \n       12 \n       31 \n       2002 \n       15 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35545 \n       35546 \n       12 \n       31 \n       2002 \n       15 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35546 \n       35547 \n       12 \n       31 \n       2002 \n       10 \n       RM \n       F \n       15.0 \n       14.0 \n     \n     \n       35547 \n       35548 \n       12 \n       31 \n       2002 \n       7 \n       DO \n       M \n       36.0 \n       51.0 \n     \n     \n       35548 \n       35549 \n       12 \n       31 \n       2002 \n       5 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     35549 rows \u00d7 9 columns   which prints contents like above.  You can also select just a few rows, so it is easier to fit on one window, you can see that pandas has neatly formatted the data to fit our screen.  Here, we will be using a function called  head .  The  head()  function displays the first several lines of a file. It is discussed below.  surveys_df.head()   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       1 \n       2 \n       7 \n       16 \n       1977 \n       3 \n       NL \n       M \n       33.0 \n       NaN \n     \n     \n       2 \n       3 \n       7 \n       16 \n       1977 \n       2 \n       DM \n       F \n       37.0 \n       NaN \n     \n     \n       3 \n       4 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       4 \n       5 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN",
            "title": "So What's a DataFrame?"
        },
        {
            "location": "/modules/working_with_data/#exploring-our-species-survey-data",
            "text": "Again, we can use the  type  function to see what kind of thing  surveys_df  is:  type(surveys_df)   output  \npandas.core.frame.DataFrame   As expected, it's a DataFrame (or, to use the full name that Python uses to refer\nto it internally, a  pandas.core.frame.DataFrame ).  What kind of things does  surveys_df  contain? DataFrames have an attribute\ncalled  dtypes  that answers this:  surveys_df.dtypes   output  \nrecord_id            int64\nmonth                int64\nday                  int64\nyear                 int64\nsite_id              int64\nspecies_id          object\nsex                 object\nhindfoot_length    float64\nweight             float64\ndtype: object   All the values in a single column have the same type. For example, months have type int64 , which is a kind of integer. Cells in the month column cannot have\nfractional values, but the weight and hindfoot_length columns can, because they\nhave type  float64 . The  object  type doesn't have a very helpful name, but in\nthis case it represents strings (such as 'M' and 'F' in the case of sex).",
            "title": "Exploring Our Species Survey Data"
        },
        {
            "location": "/modules/working_with_data/#useful-ways-to-view-dataframe-objects-in-python",
            "text": "There are many ways to summarize and access the data stored in DataFrames,\nusing attributes and methods provided by the DataFrame object.  To access an attribute, use the DataFrame object name followed by the attribute\nname  df_object.attribute . Using the DataFrame  surveys_df  and attribute columns , an index of all the column names in the DataFrame can be accessed\nwith  surveys_df.columns .  Methods are called in a similar fashion using the syntax  df_object.method() .\nAs an example,  surveys_df.head()  gets the first few rows in the DataFrame surveys_df  using  the  head()  method . With a method, we can supply extra\ninformation in the parens to control behaviour.  Let's look at the data using these.",
            "title": "Useful Ways to View DataFrame objects in Python"
        },
        {
            "location": "/modules/working_with_data/#challenge-dataframes",
            "text": "Using our DataFrame  surveys_df , try out the attributes & methods below to see\nwhat they return.   surveys_df.columns  surveys_df.shape  Take note of the output of  shape  - what format does it\n   return the shape of the DataFrame in?   HINT:  More on tuples, here .  surveys_df.head()  Also, what does  surveys_df.head(15)  do?  surveys_df.tail()",
            "title": "Challenge - DataFrames"
        },
        {
            "location": "/modules/working_with_data/#calculating-statistics-from-data",
            "text": "We've read our data into Python. Next, let's perform some quick summary\nstatistics to learn more about the data that we're working with. We might want\nto know how many animals were collected in each plot, or how many of each\nspecies were caught. We can perform summary stats quickly using groups. But\nfirst we need to figure out what we want to group by.  Let's begin by exploring our data:  # Look at the column names\nsurveys_df.columns   output  \nIndex(['record_id', 'month', 'day', 'year', 'site_id', 'species_id', 'sex',\n       'hindfoot_length', 'weight'],\n      dtype='object')   Let's get a list of all the species. The  pd.unique  function tells us all of\nthe unique values in the  species_id  column.  pd.unique(surveys_df['species_id'])   output  \narray(['NL', 'DM', 'PF', 'PE', 'DS', 'PP', 'SH', 'OT', 'DO', 'OX', 'SS',\n       'OL', 'RM', nan, 'SA', 'PM', 'AH', 'DX', 'AB', 'CB', 'CM', 'CQ',\n       'RF', 'PC', 'PG', 'PH', 'PU', 'CV', 'UR', 'UP', 'ZL', 'UL', 'CS',\n       'SC', 'BA', 'SF', 'RO', 'AS', 'SO', 'PI', 'ST', 'CU', 'SU', 'RX',\n       'PB', 'PL', 'PX', 'CT', 'US'], dtype=object)",
            "title": "Calculating Statistics From Data"
        },
        {
            "location": "/modules/working_with_data/#challenge-statistics",
            "text": "Create a list of unique site ID's found in the surveys data. Call it\n   site_names . How many unique sites are there in the data? How many unique\n  species are in the data?    What is the difference between  len(site_names)  and  surveys_df['site_id'].nunique() ?",
            "title": "Challenge - Statistics"
        },
        {
            "location": "/modules/working_with_data/#groups-in-pandas",
            "text": "We often want to calculate summary statistics grouped by subsets or attributes\nwithin fields of our data. For example, we might want to calculate the average\nweight of all individuals per site.  We can calculate basic statistics for all records in a single column using the\nsyntax below:  surveys_df['weight'].describe()   output  \ncount    32283.000000\nmean        42.672428\nstd         36.631259\nmin          4.000000\n25%         20.000000\n50%         37.000000\n75%         48.000000\nmax        280.000000\nName: weight, dtype: float64   We can also extract one specific metric if we wish:  surveys_df['weight'].min()\nsurveys_df['weight'].max()\nsurveys_df['weight'].mean()\nsurveys_df['weight'].std()\n# only the last command shows output below - you can try the others above in new cells\nsurveys_df['weight'].count()   output  \n32283   But if we want to summarize by one or more variables, for example sex, we can\nuse  Pandas'  .groupby  method . Once we've created a groupby DataFrame, we\ncan quickly calculate summary statistics by a group of our choice.  # Group data by sex\ngrouped_data = surveys_df.groupby('sex')  The  pandas function  describe  will return descriptive stats including: mean,\nmedian, max, min, std and count for a particular column in the data.  Note  Pandas' describe  function will only return summary values for columns containing\nnumeric data.  # Summary statistics for all numeric columns by sex\ngrouped_data.describe()\n\n# Provide the mean for each numeric column by sex\n# As above, only the last command shows output below - you can try the others above in new cells\ngrouped_data.mean()   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       hindfoot_length \n       weight \n     \n     \n       sex \n       \n       \n       \n       \n       \n       \n       \n     \n   \n   \n     \n       F \n       18036.412046 \n       6.583047 \n       16.007138 \n       1990.644997 \n       11.440854 \n       28.836780 \n       42.170555 \n     \n     \n       M \n       17754.835601 \n       6.392668 \n       16.184286 \n       1990.480401 \n       11.098282 \n       29.709578 \n       42.995379 \n     \n      The  groupby  command is powerful in that it allows us to quickly generate\nsummary stats.",
            "title": "Groups in Pandas"
        },
        {
            "location": "/modules/working_with_data/#challenge-summary-data",
            "text": "How many recorded individuals are female  F  and how many male  M   A) 17348 and 15690  B) 14894 and 16476  C) 15303 and 16879  D) 15690 and 17348     What happens when you group by two columns using the following syntax and\n    then grab mean values:   grouped_data2 = surveys_df.groupby(['site_id','sex'])  grouped_data2.mean()     Summarize weight values for each site in your data. HINT: you can use the\n  following syntax to only create summary statistics for one column in your data\n   by_site['weight'].describe()",
            "title": "Challenge - Summary Data"
        },
        {
            "location": "/modules/working_with_data/#quickly-creating-summary-counts-in-pandas",
            "text": "Let's next count the number of samples for each species. We can do this in a few\nways, but we'll use  groupby  combined with  a  count()  method .  # Count the number of samples by species\nspecies_counts = surveys_df.groupby('species_id')['record_id'].count()\nprint(species_counts)   output  \nspecies_id\nAB      303\nAH      437\nAS        2\nBA       46\nCB       50\nCM       13\nCQ       16\nCS        1\nCT        1\nCU        1\nCV        1\nDM    10596\nDO     3027\nDS     2504\nDX       40\nNL     1252\nOL     1006\nOT     2249\nOX       12\nPB     2891\nPC       39\nPE     1299\nPF     1597\nPG        8\nPH       32\nPI        9\nPL       36\nPM      899\nPP     3123\nPU        5\nPX        6\nRF       75\nRM     2609\nRO        8\nRX        2\nSA       75\nSC        1\nSF       43\nSH      147\nSO       43\nSS      248\nST        1\nSU        5\nUL        4\nUP        8\nUR       10\nUS        4\nZL        2\nName: record_id, dtype: int64   Or, we can also count just the rows that have the species \"DO\":  surveys_df.groupby('species_id')['record_id'].count()['DO']   output  \n3027",
            "title": "Quickly Creating Summary Counts in Pandas"
        },
        {
            "location": "/modules/working_with_data/#basic-math-functions",
            "text": "If we wanted to, we could perform math on an entire column of our data. For\nexample let's multiply all weight values by 2. A more practical use of this might\nbe to normalize the data according to a mean, area, or some other value\ncalculated from our data.  # Multiply all weight values by 2 but does not change the original weight data\nsurveys_df['weight']*2   output  \n0          NaN\n1          NaN\n2          NaN\n3          NaN\n4          NaN\n5          NaN\n6          NaN\n7          NaN\n8          NaN\n9          NaN\n10         NaN\n11         NaN\n12         NaN\n13         NaN\n14         NaN\n15         NaN\n16         NaN\n17         NaN\n18         NaN\n19         NaN\n20         NaN\n21         NaN\n22         NaN\n23         NaN\n24         NaN\n25         NaN\n26         NaN\n27         NaN\n28         NaN\n29         NaN\n         ...  \n35519     72.0\n35520     96.0\n35521     90.0\n35522     88.0\n35523     54.0\n35524     52.0\n35525     48.0\n35526     86.0\n35527      NaN\n35528     50.0\n35529      NaN\n35530      NaN\n35531     86.0\n35532     96.0\n35533    112.0\n35534    106.0\n35535     84.0\n35536     92.0\n35537     62.0\n35538    136.0\n35539     46.0\n35540     62.0\n35541     58.0\n35542     68.0\n35543      NaN\n35544      NaN\n35545      NaN\n35546     28.0\n35547    102.0\n35548      NaN\nName: weight, Length: 35549, dtype: float64",
            "title": "Basic Math Functions"
        },
        {
            "location": "/modules/working_with_data/#quick-easy-plotting-data-using-pandas",
            "text": "We can plot our summary stats using Pandas, too.  ## To make sure figures appear inside Jupyter Notebook\n%matplotlib inline\n\n# Create a quick bar chart\nspecies_counts.plot(kind='bar');",
            "title": "Quick &amp; Easy Plotting Data Using Pandas"
        },
        {
            "location": "/modules/working_with_data/#animals-per-site-plot",
            "text": "We can also look at how many animals were captured in each site.  total_count = surveys_df.groupby('site_id')['record_id'].nunique()\n# Let's plot that too\ntotal_count.plot(kind='bar')   output",
            "title": "Animals per site plot"
        },
        {
            "location": "/modules/working_with_data/#extra-plotting-challenge",
            "text": "Create a plot of average weight across all species per plot.    Create a plot of total males versus total females for the entire dataset.    Create a stacked bar plot, with weight on the Y axis, and the stacked variable being sex. The plot should show total weight by sex for each plot. Some tips are below to help you solve this challenge: For more on Pandas plots, visit this link.",
            "title": "Extra Plotting Challenge"
        },
        {
            "location": "/modules/missing_values/",
            "text": ".output_label {\n    text-align: right;\n    margin: -1em;\n    padding: 0;\n    font-size: 0.5em;\n    color: grey\n}\n\n\n\n\n\n\n\nHandling Missing Data\n\n\nMost of the times real-world data is rarely clean and homogeneous. In many cases, dataset of interest will have some amount of data missing. To make matters even more complicated, different data sources may indicate missing data in different ways.\n\n\nIn this module, we will discuss some general considerations for missing data, discuss how Pandas chooses to represent it, and demonstrate some built-in Pandas tools for handling missing data in Python. We refer the missing data as null, NaN, or NA values in general.\n\n\nBefore we start, lets make sure the Pandas and matplotlib packages are \ninstalled\n. \n\n\n!pip install pandas matplotlib\n\n\n\n\n\n\noutput\n\n\n\nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: matplotlib in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (2.2.2)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (2.2.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.0.1)\nRequirement already satisfied: six>=1.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.11.0)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (0.10.0)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib) (39.1.0)\n\n\n\n\n\n\n\n# Now import pandas into your notebook as pd\nimport pandas as pd\n\n\n\n\nNow again import \nsurveys.csv\n dataset into our notebook as we did in previous lesson.\n\n\nsurveys_df = pd.read_csv(\"data/surveys.csv\")\n\n\n\n\nUsing masks to identify a specific condition\n\n\nA \nmask\n can be useful to locate where a particular subset of values exist or\ndon't exist - for example,  NaN, or \"Not a Number\" values. To understand masks,\nwe also need to understand \nBOOLEAN\n objects in Python.\n\n\nBoolean values include \nTrue\n or \nFalse\n. For example,\n\n\n# set value of x to be 5\nx = 5\n\n\n\n\nx > 5\n\n\n\n\n\n\noutput\n\n\n\nFalse\n\n\n\n\n\n\nx == 5\n\n\n\n\n\n\noutput\n\n\n\nTrue\n\n\n\n\n\n\nFinding Missing Values\n\n\nLet's identify all locations in the survey data that have\nnull (missing or NaN) data values. We can use the \nisnull\n method to do this.\nThe \nisnull\n method will compare each cell with a null value. If an element\nhas a null value, it will be assigned a value of  \nTrue\n in the output object.\n\n\npd.isnull(surveys_df).head()\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nTrue\n\n    \n\n    \n\n      \n1\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nTrue\n\n    \n\n    \n\n      \n2\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nTrue\n\n    \n\n    \n\n      \n3\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nTrue\n\n    \n\n    \n\n      \n4\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nFalse\n\n      \nTrue\n\n    \n\n  \n\n\n\n\n\n\n\nHow to select rows with missing data\n\n\nTo select the rows where there are null values, we can use\nthe mask as an index to subset our data as follows:\n\n\n# To select only the rows with NaN values, we can use the 'any()' method\nsurveys_df[pd.isnull(surveys_df).any(axis=1)]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nNL\n\n      \nM\n\n      \n33.0\n\n      \nNaN\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nPF\n\n      \nM\n\n      \n14.0\n\n      \nNaN\n\n    \n\n    \n\n      \n6\n\n      \n7\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPE\n\n      \nF\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n7\n\n      \n8\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n8\n\n      \n9\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n9\n\n      \n10\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nPF\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n10\n\n      \n11\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n5\n\n      \nDS\n\n      \nF\n\n      \n53.0\n\n      \nNaN\n\n    \n\n    \n\n      \n11\n\n      \n12\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n12\n\n      \n13\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n13\n\n      \n14\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n8\n\n      \nDM\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n14\n\n      \n15\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n15\n\n      \n16\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n16\n\n      \n17\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n17\n\n      \n18\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPP\n\n      \nM\n\n      \n22.0\n\n      \nNaN\n\n    \n\n    \n\n      \n18\n\n      \n19\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nPF\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n19\n\n      \n20\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n20\n\n      \n21\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n21\n\n      \n22\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nNL\n\n      \nF\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n22\n\n      \n23\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n23\n\n      \n24\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nSH\n\n      \nM\n\n      \n21.0\n\n      \nNaN\n\n    \n\n    \n\n      \n24\n\n      \n25\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n9\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n25\n\n      \n26\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n26\n\n      \n27\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n27\n\n      \n28\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n28\n\n      \n29\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nPP\n\n      \nM\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n29\n\n      \n30\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n10\n\n      \nDS\n\n      \nF\n\n      \n52.0\n\n      \nNaN\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n35187\n\n      \n35188\n\n      \n11\n\n      \n10\n\n      \n2002\n\n      \n10\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35256\n\n      \n35257\n\n      \n12\n\n      \n7\n\n      \n2002\n\n      \n22\n\n      \nPB\n\n      \nM\n\n      \n26.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35259\n\n      \n35260\n\n      \n12\n\n      \n7\n\n      \n2002\n\n      \n21\n\n      \nPB\n\n      \nF\n\n      \n24.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35277\n\n      \n35278\n\n      \n12\n\n      \n7\n\n      \n2002\n\n      \n20\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35279\n\n      \n35280\n\n      \n12\n\n      \n7\n\n      \n2002\n\n      \n16\n\n      \nPB\n\n      \nM\n\n      \n28.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35322\n\n      \n35323\n\n      \n12\n\n      \n8\n\n      \n2002\n\n      \n11\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35328\n\n      \n35329\n\n      \n12\n\n      \n8\n\n      \n2002\n\n      \n11\n\n      \nPP\n\n      \nM\n\n      \nNaN\n\n      \n16.0\n\n    \n\n    \n\n      \n35370\n\n      \n35371\n\n      \n12\n\n      \n8\n\n      \n2002\n\n      \n14\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35378\n\n      \n35379\n\n      \n12\n\n      \n8\n\n      \n2002\n\n      \n15\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35384\n\n      \n35385\n\n      \n12\n\n      \n8\n\n      \n2002\n\n      \n10\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35387\n\n      \n35388\n\n      \n12\n\n      \n29\n\n      \n2002\n\n      \n1\n\n      \nDO\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35403\n\n      \n35404\n\n      \n12\n\n      \n29\n\n      \n2002\n\n      \n2\n\n      \nNL\n\n      \nF\n\n      \n30.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35448\n\n      \n35449\n\n      \n12\n\n      \n29\n\n      \n2002\n\n      \n20\n\n      \nOT\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35452\n\n      \n35453\n\n      \n12\n\n      \n29\n\n      \n2002\n\n      \n20\n\n      \nPB\n\n      \nM\n\n      \n28.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35457\n\n      \n35458\n\n      \n12\n\n      \n29\n\n      \n2002\n\n      \n20\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35477\n\n      \n35478\n\n      \n12\n\n      \n29\n\n      \n2002\n\n      \n24\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35485\n\n      \n35486\n\n      \n12\n\n      \n29\n\n      \n2002\n\n      \n16\n\n      \nDO\n\n      \nM\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35495\n\n      \n35496\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n4\n\n      \nPB\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35510\n\n      \n35511\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n11\n\n      \nDX\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35511\n\n      \n35512\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n11\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35512\n\n      \n35513\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n11\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35514\n\n      \n35515\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n11\n\n      \nSF\n\n      \nF\n\n      \n27.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35519\n\n      \n35520\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n9\n\n      \nSF\n\n      \nNaN\n\n      \n24.0\n\n      \n36.0\n\n    \n\n    \n\n      \n35527\n\n      \n35528\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35529\n\n      \n35530\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nOT\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35530\n\n      \n35531\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n13\n\n      \nPB\n\n      \nF\n\n      \n27.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35543\n\n      \n35544\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nUS\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35544\n\n      \n35545\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35545\n\n      \n35546\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n15\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n35548\n\n      \n35549\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n5\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n4873 rows \u00d7 9 columns\n\n\n\n\n\nExplaination\n\n\nNotice that we have \n4873\n observations/rows that contain one or more missing values. \nThats roughly \n14%\n of data contains missing values.\n\n\nWe have used \n[]\n convension to select subset of data. \n\n\nMore information about slicing and indexing can be found out \nhere\n.\n\n\n(axis=1)\n is a numpy convention to specify columns. \n\n\nNote that the \nweight\n column of our DataFrame contains many \nnull\n or \nNaN\n\nvalues. Next, we will explore ways of dealing with this.\n\n\nIf we look at the \nweight\n column in the surveys\ndata we notice that there are NaN (\nN\not \na\n \nN\number) values. \nNaN\n values are undefined\nvalues that cannot be represented mathematically. Pandas, for example, will read\nan empty cell in a CSV or Excel sheet as a NaN. NaNs have some desirable properties: if we\nwere to average the \nweight\n column without replacing our NaNs, Python would know to skip\nover those cells.\n\n\nDealing with missing values.\n\n\nDealing with missing data values is always a challenge. It's sometimes hard to\nknow why values are missing - was it because of a data entry error? Or data that\nsomeone was unable to collect? Should the value be 0? We need to know how\nmissing values are represented in the dataset in order to make good decisions.\nIf we're lucky, we have some metadata that will tell us more about how null\nvalues were handled.\n\n\nFor instance, in some disciplines, like Remote Sensing, missing data values are\noften defined as -9999. Having a bunch of -9999 values in your data could really\nalter numeric calculations. Often in spreadsheets, cells are left empty where no\ndata are available. Pandas will, by default, replace those missing values with\nNaN. However it is good practice to get in the habit of intentionally marking\ncells that have no data, with a no data value! That way there are no questions\nin the future when you (or someone else) explores your data.\n\n\nWhere Are the NaN's?\n\n\nLet's explore the NaN values in our data a bit further. Using the tools we\nlearned in lesson 02, we can figure out how many rows contain NaN values for\nweight. We can also create a new subset from our data that only contains rows\nwith weight values > 0 (i.e., select meaningful weight values):\n\n\n## How many missing values are there in weight column?\nlen(surveys_df[pd.isnull(surveys_df.weight)])\n\n\n\n\n\n\noutput\n\n\n\n3266\n\n\n\n\n\n\n# How many rows have weight values?\nlen(surveys_df[surveys_df.weight> 0])\n\n\n\n\n\n\noutput\n\n\n\n32283\n\n\n\n\n\n\nWe can replace all NaN values with zeroes using the \n.fillna()\n method (after\nmaking a copy of the data so we don't lose our work):\n\n\n# Creat a new DataFrame using copy\ndf1 = surveys_df.copy()\n\n# Fill all NaN values with 0\ndf1['weight'] = df1['weight'].fillna(0)\n\n\n\n\nHowever NaN and 0 yield different analysis results. The mean value when NaN\nvalues are replaced with 0 is different from when NaN values are simply thrown\nout or ignored.\n\n\nsurveys_df['weight'].mean()\n\n\n\n\n\n\noutput\n\n\n\n42.672428212991356\n\n\n\n\n\n\ndf1['weight'].mean()\n\n\n\n\n\n\noutput\n\n\n\n38.751976145601844\n\n\n\n\n\n\nExtra Information\n\n\nWe can fill NaN values with any value that we chose. The code below fills all\nNaN values with a mean for all weight values.\n\n\ndf1['weight'] = surveys_df['weight'].fillna(surveys_df['weight'].mean())\n\n\n\n\ndf1['weight'].mean()\n\n\n\n\n\n\noutput\n\n\n\n42.672428212991356\n\n\n\n\n\n\nWriting Out Data to CSV\n\n\nWe've learned about using manipulating data to get desired outputs. But we've also discussed\nkeeping data that has been manipulated separate from our raw data. Something we might be interested\nin doing is working with only the columns that have full data. First, let's reload the data so\nwe're not mixing up all of our previous manipulations.\n\n\ndf_na = surveys_df.dropna()\n\n\n\n\nIf you now type \ndf_na\n, you should observe that the resulting DataFrame has \n30676\n rows\nand 9 columns, much smaller than the \n35549\n row original.\n\n\nWe can now use the \nto_csv\n command to do export a DataFrame in CSV format. Note that the code\nbelow will by default save the data into the current working directory. We can\nsave it to a different folder by adding the foldername and a slash before the filename:\n\ndf1.to_csv('foldername/out.csv')\n. \nWe use 'index=False' so that\npandas doesn't include the index number for each line.\n\n\n# Write DataFrame to CSV\ndf_na.to_csv('data_output/surveys_complete.csv', index=False)\n\n\n\n\nRecap\n\n\nWhat we've learned:\n\n\n\n\nWhat NaN values are, how they might be represented, and what this means for your work\n\n\nHow to replace NaN values, if desired\n\n\nHow to use \nto_csv\n to write manipulated data to a file.\n\n\n\n\nExtra\n\n\nWe can run \nisnull\n on a particular column too. What does the code below do?\n\n\n# What does this do?\nempty_weights = surveys_df[pd.isnull(surveys_df['weight'])]['weight']\nprint(empty_weights)\n\n\n\n\n\n\noutput\n\n\n\n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n5       NaN\n6       NaN\n7       NaN\n8       NaN\n9       NaN\n10      NaN\n11      NaN\n12      NaN\n13      NaN\n14      NaN\n15      NaN\n16      NaN\n17      NaN\n18      NaN\n19      NaN\n20      NaN\n21      NaN\n22      NaN\n23      NaN\n24      NaN\n25      NaN\n26      NaN\n27      NaN\n28      NaN\n29      NaN\n         ..\n35138   NaN\n35168   NaN\n35187   NaN\n35256   NaN\n35259   NaN\n35277   NaN\n35279   NaN\n35322   NaN\n35370   NaN\n35378   NaN\n35384   NaN\n35387   NaN\n35403   NaN\n35448   NaN\n35452   NaN\n35457   NaN\n35477   NaN\n35485   NaN\n35495   NaN\n35510   NaN\n35511   NaN\n35512   NaN\n35514   NaN\n35527   NaN\n35529   NaN\n35530   NaN\n35543   NaN\n35544   NaN\n35545   NaN\n35548   NaN\nName: weight, Length: 3266, dtype: float64\n\n\n\n\n\n\n\nLet's take a minute to look at the statement above. We are using the Boolean\nobject \npd.isnull(surveys_df['weight'])\n as an index to \nsurveys_df\n. We are\nasking Python to select rows that have a \nNaN\n value of weight.",
            "title": "Missing values"
        },
        {
            "location": "/modules/missing_values/#handling-missing-data",
            "text": "Most of the times real-world data is rarely clean and homogeneous. In many cases, dataset of interest will have some amount of data missing. To make matters even more complicated, different data sources may indicate missing data in different ways.  In this module, we will discuss some general considerations for missing data, discuss how Pandas chooses to represent it, and demonstrate some built-in Pandas tools for handling missing data in Python. We refer the missing data as null, NaN, or NA values in general.  Before we start, lets make sure the Pandas and matplotlib packages are  installed .   !pip install pandas matplotlib   output  \nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: matplotlib in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (2.2.2)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (2.2.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.0.1)\nRequirement already satisfied: six>=1.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.11.0)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (0.10.0)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib) (39.1.0)   # Now import pandas into your notebook as pd\nimport pandas as pd  Now again import  surveys.csv  dataset into our notebook as we did in previous lesson.  surveys_df = pd.read_csv(\"data/surveys.csv\")",
            "title": "Handling Missing Data"
        },
        {
            "location": "/modules/missing_values/#using-masks-to-identify-a-specific-condition",
            "text": "A  mask  can be useful to locate where a particular subset of values exist or\ndon't exist - for example,  NaN, or \"Not a Number\" values. To understand masks,\nwe also need to understand  BOOLEAN  objects in Python.  Boolean values include  True  or  False . For example,  # set value of x to be 5\nx = 5  x > 5   output  \nFalse   x == 5   output  \nTrue",
            "title": "Using masks to identify a specific condition"
        },
        {
            "location": "/modules/missing_values/#finding-missing-values",
            "text": "Let's identify all locations in the survey data that have\nnull (missing or NaN) data values. We can use the  isnull  method to do this.\nThe  isnull  method will compare each cell with a null value. If an element\nhas a null value, it will be assigned a value of   True  in the output object.  pd.isnull(surveys_df).head()   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       True \n     \n     \n       1 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       True \n     \n     \n       2 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       True \n     \n     \n       3 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       True \n     \n     \n       4 \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       False \n       True",
            "title": "Finding Missing Values"
        },
        {
            "location": "/modules/missing_values/#how-to-select-rows-with-missing-data",
            "text": "To select the rows where there are null values, we can use\nthe mask as an index to subset our data as follows:  # To select only the rows with NaN values, we can use the 'any()' method\nsurveys_df[pd.isnull(surveys_df).any(axis=1)]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       1 \n       2 \n       7 \n       16 \n       1977 \n       3 \n       NL \n       M \n       33.0 \n       NaN \n     \n     \n       2 \n       3 \n       7 \n       16 \n       1977 \n       2 \n       DM \n       F \n       37.0 \n       NaN \n     \n     \n       3 \n       4 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       4 \n       5 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       5 \n       6 \n       7 \n       16 \n       1977 \n       1 \n       PF \n       M \n       14.0 \n       NaN \n     \n     \n       6 \n       7 \n       7 \n       16 \n       1977 \n       2 \n       PE \n       F \n       NaN \n       NaN \n     \n     \n       7 \n       8 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       M \n       37.0 \n       NaN \n     \n     \n       8 \n       9 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       9 \n       10 \n       7 \n       16 \n       1977 \n       6 \n       PF \n       F \n       20.0 \n       NaN \n     \n     \n       10 \n       11 \n       7 \n       16 \n       1977 \n       5 \n       DS \n       F \n       53.0 \n       NaN \n     \n     \n       11 \n       12 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       12 \n       13 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       13 \n       14 \n       7 \n       16 \n       1977 \n       8 \n       DM \n       NaN \n       NaN \n       NaN \n     \n     \n       14 \n       15 \n       7 \n       16 \n       1977 \n       6 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       15 \n       16 \n       7 \n       16 \n       1977 \n       4 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       16 \n       17 \n       7 \n       16 \n       1977 \n       3 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       17 \n       18 \n       7 \n       16 \n       1977 \n       2 \n       PP \n       M \n       22.0 \n       NaN \n     \n     \n       18 \n       19 \n       7 \n       16 \n       1977 \n       4 \n       PF \n       NaN \n       NaN \n       NaN \n     \n     \n       19 \n       20 \n       7 \n       17 \n       1977 \n       11 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       20 \n       21 \n       7 \n       17 \n       1977 \n       14 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       21 \n       22 \n       7 \n       17 \n       1977 \n       15 \n       NL \n       F \n       31.0 \n       NaN \n     \n     \n       22 \n       23 \n       7 \n       17 \n       1977 \n       13 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       23 \n       24 \n       7 \n       17 \n       1977 \n       13 \n       SH \n       M \n       21.0 \n       NaN \n     \n     \n       24 \n       25 \n       7 \n       17 \n       1977 \n       9 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       25 \n       26 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       31.0 \n       NaN \n     \n     \n       26 \n       27 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       27 \n       28 \n       7 \n       17 \n       1977 \n       11 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       28 \n       29 \n       7 \n       17 \n       1977 \n       11 \n       PP \n       M \n       NaN \n       NaN \n     \n     \n       29 \n       30 \n       7 \n       17 \n       1977 \n       10 \n       DS \n       F \n       52.0 \n       NaN \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       35187 \n       35188 \n       11 \n       10 \n       2002 \n       10 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       35256 \n       35257 \n       12 \n       7 \n       2002 \n       22 \n       PB \n       M \n       26.0 \n       NaN \n     \n     \n       35259 \n       35260 \n       12 \n       7 \n       2002 \n       21 \n       PB \n       F \n       24.0 \n       NaN \n     \n     \n       35277 \n       35278 \n       12 \n       7 \n       2002 \n       20 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35279 \n       35280 \n       12 \n       7 \n       2002 \n       16 \n       PB \n       M \n       28.0 \n       NaN \n     \n     \n       35322 \n       35323 \n       12 \n       8 \n       2002 \n       11 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35328 \n       35329 \n       12 \n       8 \n       2002 \n       11 \n       PP \n       M \n       NaN \n       16.0 \n     \n     \n       35370 \n       35371 \n       12 \n       8 \n       2002 \n       14 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35378 \n       35379 \n       12 \n       8 \n       2002 \n       15 \n       PB \n       F \n       26.0 \n       NaN \n     \n     \n       35384 \n       35385 \n       12 \n       8 \n       2002 \n       10 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       35387 \n       35388 \n       12 \n       29 \n       2002 \n       1 \n       DO \n       M \n       35.0 \n       NaN \n     \n     \n       35403 \n       35404 \n       12 \n       29 \n       2002 \n       2 \n       NL \n       F \n       30.0 \n       NaN \n     \n     \n       35448 \n       35449 \n       12 \n       29 \n       2002 \n       20 \n       OT \n       F \n       20.0 \n       NaN \n     \n     \n       35452 \n       35453 \n       12 \n       29 \n       2002 \n       20 \n       PB \n       M \n       28.0 \n       NaN \n     \n     \n       35457 \n       35458 \n       12 \n       29 \n       2002 \n       20 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35477 \n       35478 \n       12 \n       29 \n       2002 \n       24 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35485 \n       35486 \n       12 \n       29 \n       2002 \n       16 \n       DO \n       M \n       37.0 \n       NaN \n     \n     \n       35495 \n       35496 \n       12 \n       31 \n       2002 \n       4 \n       PB \n       NaN \n       NaN \n       NaN \n     \n     \n       35510 \n       35511 \n       12 \n       31 \n       2002 \n       11 \n       DX \n       NaN \n       NaN \n       NaN \n     \n     \n       35511 \n       35512 \n       12 \n       31 \n       2002 \n       11 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35512 \n       35513 \n       12 \n       31 \n       2002 \n       11 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35514 \n       35515 \n       12 \n       31 \n       2002 \n       11 \n       SF \n       F \n       27.0 \n       NaN \n     \n     \n       35519 \n       35520 \n       12 \n       31 \n       2002 \n       9 \n       SF \n       NaN \n       24.0 \n       36.0 \n     \n     \n       35527 \n       35528 \n       12 \n       31 \n       2002 \n       13 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35529 \n       35530 \n       12 \n       31 \n       2002 \n       13 \n       OT \n       F \n       20.0 \n       NaN \n     \n     \n       35530 \n       35531 \n       12 \n       31 \n       2002 \n       13 \n       PB \n       F \n       27.0 \n       NaN \n     \n     \n       35543 \n       35544 \n       12 \n       31 \n       2002 \n       15 \n       US \n       NaN \n       NaN \n       NaN \n     \n     \n       35544 \n       35545 \n       12 \n       31 \n       2002 \n       15 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35545 \n       35546 \n       12 \n       31 \n       2002 \n       15 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       35548 \n       35549 \n       12 \n       31 \n       2002 \n       5 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     4873 rows \u00d7 9 columns",
            "title": "How to select rows with missing data"
        },
        {
            "location": "/modules/missing_values/#explaination",
            "text": "Notice that we have  4873  observations/rows that contain one or more missing values. \nThats roughly  14%  of data contains missing values.  We have used  []  convension to select subset of data.   More information about slicing and indexing can be found out  here .  (axis=1)  is a numpy convention to specify columns.   Note that the  weight  column of our DataFrame contains many  null  or  NaN \nvalues. Next, we will explore ways of dealing with this.  If we look at the  weight  column in the surveys\ndata we notice that there are NaN ( N ot  a   N umber) values.  NaN  values are undefined\nvalues that cannot be represented mathematically. Pandas, for example, will read\nan empty cell in a CSV or Excel sheet as a NaN. NaNs have some desirable properties: if we\nwere to average the  weight  column without replacing our NaNs, Python would know to skip\nover those cells.",
            "title": "Explaination"
        },
        {
            "location": "/modules/missing_values/#dealing-with-missing-values",
            "text": "Dealing with missing data values is always a challenge. It's sometimes hard to\nknow why values are missing - was it because of a data entry error? Or data that\nsomeone was unable to collect? Should the value be 0? We need to know how\nmissing values are represented in the dataset in order to make good decisions.\nIf we're lucky, we have some metadata that will tell us more about how null\nvalues were handled.  For instance, in some disciplines, like Remote Sensing, missing data values are\noften defined as -9999. Having a bunch of -9999 values in your data could really\nalter numeric calculations. Often in spreadsheets, cells are left empty where no\ndata are available. Pandas will, by default, replace those missing values with\nNaN. However it is good practice to get in the habit of intentionally marking\ncells that have no data, with a no data value! That way there are no questions\nin the future when you (or someone else) explores your data.",
            "title": "Dealing with missing values."
        },
        {
            "location": "/modules/missing_values/#where-are-the-nans",
            "text": "Let's explore the NaN values in our data a bit further. Using the tools we\nlearned in lesson 02, we can figure out how many rows contain NaN values for\nweight. We can also create a new subset from our data that only contains rows\nwith weight values > 0 (i.e., select meaningful weight values):  ## How many missing values are there in weight column?\nlen(surveys_df[pd.isnull(surveys_df.weight)])   output  \n3266   # How many rows have weight values?\nlen(surveys_df[surveys_df.weight> 0])   output  \n32283   We can replace all NaN values with zeroes using the  .fillna()  method (after\nmaking a copy of the data so we don't lose our work):  # Creat a new DataFrame using copy\ndf1 = surveys_df.copy()\n\n# Fill all NaN values with 0\ndf1['weight'] = df1['weight'].fillna(0)  However NaN and 0 yield different analysis results. The mean value when NaN\nvalues are replaced with 0 is different from when NaN values are simply thrown\nout or ignored.  surveys_df['weight'].mean()   output  \n42.672428212991356   df1['weight'].mean()   output  \n38.751976145601844",
            "title": "Where Are the NaN's?"
        },
        {
            "location": "/modules/missing_values/#extra-information",
            "text": "We can fill NaN values with any value that we chose. The code below fills all\nNaN values with a mean for all weight values.  df1['weight'] = surveys_df['weight'].fillna(surveys_df['weight'].mean())  df1['weight'].mean()   output  \n42.672428212991356",
            "title": "Extra Information"
        },
        {
            "location": "/modules/missing_values/#writing-out-data-to-csv",
            "text": "We've learned about using manipulating data to get desired outputs. But we've also discussed\nkeeping data that has been manipulated separate from our raw data. Something we might be interested\nin doing is working with only the columns that have full data. First, let's reload the data so\nwe're not mixing up all of our previous manipulations.  df_na = surveys_df.dropna()  If you now type  df_na , you should observe that the resulting DataFrame has  30676  rows\nand 9 columns, much smaller than the  35549  row original.  We can now use the  to_csv  command to do export a DataFrame in CSV format. Note that the code\nbelow will by default save the data into the current working directory. We can\nsave it to a different folder by adding the foldername and a slash before the filename: df1.to_csv('foldername/out.csv') . \nWe use 'index=False' so that\npandas doesn't include the index number for each line.  # Write DataFrame to CSV\ndf_na.to_csv('data_output/surveys_complete.csv', index=False)",
            "title": "Writing Out Data to CSV"
        },
        {
            "location": "/modules/missing_values/#recap",
            "text": "What we've learned:   What NaN values are, how they might be represented, and what this means for your work  How to replace NaN values, if desired  How to use  to_csv  to write manipulated data to a file.",
            "title": "Recap"
        },
        {
            "location": "/modules/missing_values/#extra",
            "text": "We can run  isnull  on a particular column too. What does the code below do?  # What does this do?\nempty_weights = surveys_df[pd.isnull(surveys_df['weight'])]['weight']\nprint(empty_weights)   output  \n0       NaN\n1       NaN\n2       NaN\n3       NaN\n4       NaN\n5       NaN\n6       NaN\n7       NaN\n8       NaN\n9       NaN\n10      NaN\n11      NaN\n12      NaN\n13      NaN\n14      NaN\n15      NaN\n16      NaN\n17      NaN\n18      NaN\n19      NaN\n20      NaN\n21      NaN\n22      NaN\n23      NaN\n24      NaN\n25      NaN\n26      NaN\n27      NaN\n28      NaN\n29      NaN\n         ..\n35138   NaN\n35168   NaN\n35187   NaN\n35256   NaN\n35259   NaN\n35277   NaN\n35279   NaN\n35322   NaN\n35370   NaN\n35378   NaN\n35384   NaN\n35387   NaN\n35403   NaN\n35448   NaN\n35452   NaN\n35457   NaN\n35477   NaN\n35485   NaN\n35495   NaN\n35510   NaN\n35511   NaN\n35512   NaN\n35514   NaN\n35527   NaN\n35529   NaN\n35530   NaN\n35543   NaN\n35544   NaN\n35545   NaN\n35548   NaN\nName: weight, Length: 3266, dtype: float64   Let's take a minute to look at the statement above. We are using the Boolean\nobject  pd.isnull(surveys_df['weight'])  as an index to  surveys_df . We are\nasking Python to select rows that have a  NaN  value of weight.",
            "title": "Extra"
        },
        {
            "location": "/modules/indexing/",
            "text": ".output_label {\n    text-align: right;\n    margin: -1em;\n    padding: 0;\n    font-size: 0.5em;\n    color: grey\n}\n\n\n\n\n\n\n\nIndexing, Slicing and Subsetting\n\n\nIn this lesson, we will explore \nways to access different parts of the data\n in a Pandas DataFrame using:\n\n\n\n\nIndexing,\n\n\nSlicing, and\n\n\nSubsetting\n\n\n\n\nEnsure the Pandas package is installed\n\n\n!pip install pandas matplotlib\n\n\n\n\n\n\noutput\n\n\n\nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: matplotlib in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (2.2.2)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (0.10.0)\nRequirement already satisfied: six>=1.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.11.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.0.1)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (2.2.0)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib) (39.1.0)\n\n\n\n\n\n\n\nLoading our data\n\n\nWe will continue to use the surveys dataset that we worked with in the last lesson. Let's reopen and read in the data again:\n\n\n# Make sure pandas is loaded\nimport pandas as pd\n\n# Read in the survey CSV\nsurveys_df = pd.read_csv(\"data/surveys.csv\")\n\n\n\n\nIndexing and Slicing in Python\n\n\nWe often want to work with subsets of a \nDataFrame\n object. There are\ndifferent ways to accomplish this including: using labels (column headings),\nnumeric ranges, or specific x,y index locations.\n\n\nSelecting data using Labels (Column Headings)\n\n\nWe use square brackets \n[]\n to select a subset of an Python object. For example,\nwe can select all data from a column named \nspecies_id\n from the \nsurveys_df\n\nDataFrame by name. There are two ways to do this:\n\n\n# Method 1: select a 'subset' of the data using the column name\nsurveys_df['species_id'].head()\n\n\n\n\n\n\noutput\n\n\n\n0    NL\n1    NL\n2    DM\n3    DM\n4    DM\nName: species_id, dtype: object\n\n\n\n\n\n\n# Method 2: use the column name as an 'attribute'; gives the same output\nsurveys_df.species_id.head()\n\n\n\n\n\n\noutput\n\n\n\n0    NL\n1    NL\n2    DM\n3    DM\n4    DM\nName: species_id, dtype: object\n\n\n\n\n\n\nWe can also create a new object that contains only the data within the\n\nspecies_id\n column as follows:\n\n\n# Creates an object, surveys_species, that only contains the `species_id` column\nsurveys_species = surveys_df['species_id']\n\n\n\n\nWe can pass a list of column names too, as an index to select columns in that\norder. This is useful when we need to reorganize our data.\n\n\nNOTE:\n If a column name is not contained in the DataFrame, an exception\n(error) will be raised.\n\n\n# Select the species and plot columns from the DataFrame\nsurveys_df[['species_id', 'site_id']].head()\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nspecies_id\n\n      \nsite_id\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \nNL\n\n      \n2\n\n    \n\n    \n\n      \n1\n\n      \nNL\n\n      \n3\n\n    \n\n    \n\n      \n2\n\n      \nDM\n\n      \n2\n\n    \n\n    \n\n      \n3\n\n      \nDM\n\n      \n7\n\n    \n\n    \n\n      \n4\n\n      \nDM\n\n      \n3\n\n    \n\n  \n\n\n\n\n\n\n\n\n# What happens if you ask for a column that doesn't exist?\nsurveys_df['speciess']\n\n\n\n\n\n\n---------------------------------------------------------------------------\n\nKeyError                                  Traceback (most recent call last)\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)\n   3062             try:\n-> 3063                 return self._engine.get_loc(key)\n   3064             except KeyError:\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\nKeyError: 'speciess'\n\n\nDuring handling of the above exception, another exception occurred:\n\n\nKeyError                                  Traceback (most recent call last)\n\n<ipython-input-7-8c68e7647ac0> in <module>()\n      1 \n      2 # What happens if you ask for a column that doesn't exist?\n----> 3 surveys_df['speciess']\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/frame.py in __getitem__(self, key)\n   2683             return self._getitem_multilevel(key)\n   2684         else:\n-> 2685             return self._getitem_column(key)\n   2686 \n   2687     def _getitem_column(self, key):\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/frame.py in _getitem_column(self, key)\n   2690         # get column\n   2691         if self.columns.is_unique:\n-> 2692             return self._get_item_cache(key)\n   2693 \n   2694         # duplicate columns & possible reduce dimensionality\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/generic.py in _get_item_cache(self, item)\n   2484         res = cache.get(item)\n   2485         if res is None:\n-> 2486             values = self._data.get(item)\n   2487             res = self._box_item_values(item, values)\n   2488             cache[item] = res\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/internals.py in get(self, item, fastpath)\n   4113 \n   4114             if not isna(item):\n-> 4115                 loc = self.items.get_loc(item)\n   4116             else:\n   4117                 indexer = np.arange(len(self.items))[isna(self.items)]\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)\n   3063                 return self._engine.get_loc(key)\n   3064             except KeyError:\n-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))\n   3066 \n   3067         indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\nKeyError: 'speciess'\n\n\n\nPython tells us what type of error it is in the traceback, at the bottom it says \nKeyError: 'speciess'\n which means that \nspeciess\n is not a column name (or Key in the related python data type dictionary).\n\n\n# What happens when you flip the order?\nsurveys_df[['site_id', 'species_id']].head()\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nsite_id\n\n      \nspecies_id\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n2\n\n      \nNL\n\n    \n\n    \n\n      \n1\n\n      \n3\n\n      \nNL\n\n    \n\n    \n\n      \n2\n\n      \n2\n\n      \nDM\n\n    \n\n    \n\n      \n3\n\n      \n7\n\n      \nDM\n\n    \n\n    \n\n      \n4\n\n      \n3\n\n      \nDM\n\n    \n\n  \n\n\n\n\n\n\n\nExtracting Range based Subsets: Slicing\n\n\nREMINDER\n: Python Uses 0-based Indexing\n\n\nLet's remind ourselves that Python uses 0-based\nindexing. This means that the first element in an object is located at position\n0. This is different from other tools like R and Matlab that index elements\nwithin objects starting at 1.\n\n\n# Create a list of numbers:\na = [1, 2, 3, 4, 5]\n\n\n\n\n\n\n\n\nChallenge - Extracting data\n\n\n\n\n\n\nWhat value does the code \na[0]\n return?\n\n\n\n\n\n\nHow about this: \na[5]\n\n\n\n\n\n\nIn the example above, calling \na[5]\n returns an error. Why is that?\n\n\n\n\n\n\nWhat about \na[len(a)]\n ?\n\n\n\n\n\n\nSolutions - Extracting data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSlicing Subsets of Rows in Python\n\n\nSlicing using the \n[]\n operator selects a set of rows and/or columns from a\nDataFrame. To slice out a set of rows, you use the following syntax:\n\ndata[start:stop]\n. When slicing in pandas the start bound is included in the\noutput. The stop bound is one step BEYOND the row you want to select. So if you\nwant to select rows 0, 1 and 2 your code would look like this with our \nsurveys data\n:\n\n\n# Select rows 0, 1, 2 (row 3 is not selected)\nsurveys_df[0:3]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nNL\n\n      \nM\n\n      \n33.0\n\n      \nNaN\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\nThe stop bound in Python is different from what you might be used to in\nlanguages like Matlab and R.\n\n\nNow lets select the \nfirst 5 rows (rows 0, 1, 2, 3, 4)\n.\n\n\nsurveys_df[:5]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nNL\n\n      \nM\n\n      \n33.0\n\n      \nNaN\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\n# Select the last element in the list\n# (the slice starts at the last element, and ends at the end of the list)\nsurveys_df[-1:]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n35548\n\n      \n35549\n\n      \n12\n\n      \n31\n\n      \n2002\n\n      \n5\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\nWe can also reassign values within subsets of our DataFrame.\n\n\nLet's create a brand new clean dataframe from\nthe original data CSV file.\n\n\nsurveys_df = pd.read_csv(\"data/surveys.csv\")\n\n\n\n\nSlicing Subsets of Rows and Columns in Python\n\n\nWe can select specific ranges of our data in both the row and column directions\nusing either label or integer-based indexing.\n\n\n\n\nloc\n is primarily \nlabel\n based indexing. \nIntegers\n may be used but\n  they are interpreted as a \nlabel\n.\n\n\niloc\n is primarily \ninteger\n based indexing\n\n\n\n\nTo select a subset of rows \nand\n columns from our DataFrame, we can use the\n\niloc\n method. For example, we can select month, day and year (columns 2, 3\nand 4 if we start counting at 1), like this:\n\n\niloc[row slicing, column slicing]\n\n\nsurveys_df.iloc[0:3, 1:4]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n7\n\n      \n16\n\n      \n1977\n\n    \n\n    \n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n    \n\n    \n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n    \n\n  \n\n\n\n\n\n\n\nNotice that we asked for a slice from 0:3. This yielded 3 rows of data. When you\nask for 0:3, you are actually telling Python to start at index 0 and select rows\n0, 1, 2 \nup to but not including 3\n.\n\n\nLet's explore some other ways to index and select subsets of data:\n\n\n# Select all columns for rows of index values 0 and 10\nsurveys_df.loc[[0, 10], :]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n10\n\n      \n11\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n5\n\n      \nDS\n\n      \nF\n\n      \n53.0\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\n# What does this do?\nsurveys_df.loc[0, ['species_id', 'site_id', 'weight']]\n\n\n\n\n\n\noutput\n\n\n\nspecies_id     NL\nsite_id         2\nweight        NaN\nName: 0, dtype: object\n\n\n\n\n\n\n# What happens when you type the code below?\nsurveys_df.loc[[0, 10, 35549], :]\n\n\n\n\n\n\noutput\n\n\n\n/Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/indexing.py:1472: FutureWarning: \nPassing list-likes to .loc or [] with any missing label will raise\nKeyError in the future, you can use .reindex() as an alternative.\n\nSee the documentation here:\nhttps://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate-loc-reindex-listlike\n  return self._getitem_tuple(key)\n\n\n\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1.0\n\n      \n7.0\n\n      \n16.0\n\n      \n1977.0\n\n      \n2.0\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n10\n\n      \n11.0\n\n      \n7.0\n\n      \n16.0\n\n      \n1977.0\n\n      \n5.0\n\n      \nDS\n\n      \nF\n\n      \n53.0\n\n      \nNaN\n\n    \n\n    \n\n      \n35549\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n\n\n\nNOTE\n: Labels must be found in the DataFrame or you will get a \nKeyError\n.\n\n\nIndexing by labels \nloc\n differs from indexing by integers \niloc\n.\nWith \nloc\n, the both start bound and the stop bound are \ninclusive\n. When using\n\nloc\n, integers \ncan\n be used, but the integers refer to the\nindex label and not the position. For example, using \nloc\n and select 1:4\nwill get a different result than using \niloc\n to select rows 1:4.\n\n\nWe can also select a specific data value using a row and\ncolumn location within the DataFrame and \niloc\n indexing:\n\n\n# Syntax for iloc indexing to finding a specific data element\ndat.iloc[row, column]\n\n\n\n\nIn following iloc example:\n\n\nsurveys_df.iloc[2, 6]\n\n\n\n\n\n\noutput\n\n\n\n'F'\n\n\n\n\n\n\nRemember that Python indexing begins at 0. So, the index location [2, 6]\nselects the element that is 3 rows down and 7 columns over in the DataFrame.\n\n\nChallenge - Range\n\n\n\n\n\n\nWhat happens when you execute:\n\n\n\n\nsurveys_df[0:1]\n\n\nsurveys_df[:4]\n\n\nsurveys_df[:-1]\n\n\n\n\n\n\n\n\nWhat happens when you call:\n\n\n\n\nsurveys_df.iloc[0:4, 1:4]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSubsetting Data using Criteria\n\n\nWe can also select a subset of our data using criteria. For example, we can\nselect all rows that \nhave a year value of 2002\n:\n\n\nsurveys_df[surveys_df.year == 2002].head()\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n33320\n\n      \n33321\n\n      \n1\n\n      \n12\n\n      \n2002\n\n      \n1\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \n44.0\n\n    \n\n    \n\n      \n33321\n\n      \n33322\n\n      \n1\n\n      \n12\n\n      \n2002\n\n      \n1\n\n      \nDO\n\n      \nM\n\n      \n37.0\n\n      \n58.0\n\n    \n\n    \n\n      \n33322\n\n      \n33323\n\n      \n1\n\n      \n12\n\n      \n2002\n\n      \n1\n\n      \nPB\n\n      \nM\n\n      \n28.0\n\n      \n45.0\n\n    \n\n    \n\n      \n33323\n\n      \n33324\n\n      \n1\n\n      \n12\n\n      \n2002\n\n      \n1\n\n      \nAB\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33324\n\n      \n33325\n\n      \n1\n\n      \n12\n\n      \n2002\n\n      \n1\n\n      \nDO\n\n      \nM\n\n      \n35.0\n\n      \n29.0\n\n    \n\n  \n\n\n\n\n\n\n\nOr we can select all rows that \ndo not contain the year 2002\n:\n\n\nsurveys_df[surveys_df.year != 2002]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n0\n\n      \n1\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nNL\n\n      \nM\n\n      \n32.0\n\n      \nNaN\n\n    \n\n    \n\n      \n1\n\n      \n2\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nNL\n\n      \nM\n\n      \n33.0\n\n      \nNaN\n\n    \n\n    \n\n      \n2\n\n      \n3\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n3\n\n      \n4\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n4\n\n      \n5\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n5\n\n      \n6\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nPF\n\n      \nM\n\n      \n14.0\n\n      \nNaN\n\n    \n\n    \n\n      \n6\n\n      \n7\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPE\n\n      \nF\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n7\n\n      \n8\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \nNaN\n\n    \n\n    \n\n      \n8\n\n      \n9\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n1\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n9\n\n      \n10\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nPF\n\n      \nF\n\n      \n20.0\n\n      \nNaN\n\n    \n\n    \n\n      \n10\n\n      \n11\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n5\n\n      \nDS\n\n      \nF\n\n      \n53.0\n\n      \nNaN\n\n    \n\n    \n\n      \n11\n\n      \n12\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n7\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n12\n\n      \n13\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n13\n\n      \n14\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n8\n\n      \nDM\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n14\n\n      \n15\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n6\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n15\n\n      \n16\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n16\n\n      \n17\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n3\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n17\n\n      \n18\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n2\n\n      \nPP\n\n      \nM\n\n      \n22.0\n\n      \nNaN\n\n    \n\n    \n\n      \n18\n\n      \n19\n\n      \n7\n\n      \n16\n\n      \n1977\n\n      \n4\n\n      \nPF\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n19\n\n      \n20\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDS\n\n      \nF\n\n      \n48.0\n\n      \nNaN\n\n    \n\n    \n\n      \n20\n\n      \n21\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n14\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \nNaN\n\n    \n\n    \n\n      \n21\n\n      \n22\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nNL\n\n      \nF\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n22\n\n      \n23\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n23\n\n      \n24\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n13\n\n      \nSH\n\n      \nM\n\n      \n21.0\n\n      \nNaN\n\n    \n\n    \n\n      \n24\n\n      \n25\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n9\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \nNaN\n\n    \n\n    \n\n      \n25\n\n      \n26\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n31.0\n\n      \nNaN\n\n    \n\n    \n\n      \n26\n\n      \n27\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n15\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \nNaN\n\n    \n\n    \n\n      \n27\n\n      \n28\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \nNaN\n\n    \n\n    \n\n      \n28\n\n      \n29\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n11\n\n      \nPP\n\n      \nM\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n29\n\n      \n30\n\n      \n7\n\n      \n17\n\n      \n1977\n\n      \n10\n\n      \nDS\n\n      \nF\n\n      \n52.0\n\n      \nNaN\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n33290\n\n      \n33291\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n23\n\n      \nPE\n\n      \nM\n\n      \n20.0\n\n      \n18.0\n\n    \n\n    \n\n      \n33291\n\n      \n33292\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n23\n\n      \nRM\n\n      \nF\n\n      \n16.0\n\n      \n8.0\n\n    \n\n    \n\n      \n33292\n\n      \n33293\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nPE\n\n      \nF\n\n      \n20.0\n\n      \n22.0\n\n    \n\n    \n\n      \n33293\n\n      \n33294\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nSH\n\n      \nM\n\n      \n25.0\n\n      \n43.0\n\n    \n\n    \n\n      \n33294\n\n      \n33295\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nPB\n\n      \nF\n\n      \n27.0\n\n      \n33.0\n\n    \n\n    \n\n      \n33295\n\n      \n33296\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nPB\n\n      \nM\n\n      \n25.0\n\n      \n35.0\n\n    \n\n    \n\n      \n33296\n\n      \n33297\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nRM\n\n      \nM\n\n      \n16.0\n\n      \n11.0\n\n    \n\n    \n\n      \n33297\n\n      \n33298\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nRM\n\n      \nF\n\n      \n16.0\n\n      \n8.0\n\n    \n\n    \n\n      \n33298\n\n      \n33299\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nPB\n\n      \nF\n\n      \n25.0\n\n      \n28.0\n\n    \n\n    \n\n      \n33299\n\n      \n33300\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nPB\n\n      \nF\n\n      \n26.0\n\n      \n30.0\n\n    \n\n    \n\n      \n33300\n\n      \n33301\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n20\n\n      \nPB\n\n      \nF\n\n      \n27.0\n\n      \n31.0\n\n    \n\n    \n\n      \n33301\n\n      \n33302\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n24\n\n      \nPE\n\n      \nM\n\n      \n20.0\n\n      \n24.0\n\n    \n\n    \n\n      \n33302\n\n      \n33303\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n24\n\n      \nPE\n\n      \nM\n\n      \n20.0\n\n      \n23.0\n\n    \n\n    \n\n      \n33303\n\n      \n33304\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n24\n\n      \nRM\n\n      \nM\n\n      \n16.0\n\n      \n10.0\n\n    \n\n    \n\n      \n33304\n\n      \n33305\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n7\n\n      \nPB\n\n      \nM\n\n      \n29.0\n\n      \n44.0\n\n    \n\n    \n\n      \n33305\n\n      \n33306\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n7\n\n      \nOT\n\n      \nM\n\n      \n19.0\n\n      \n21.0\n\n    \n\n    \n\n      \n33306\n\n      \n33307\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n7\n\n      \nOT\n\n      \nM\n\n      \n20.0\n\n      \n19.0\n\n    \n\n    \n\n      \n33307\n\n      \n33308\n\n      \n12\n\n      \n15\n\n      \n2001\n\n      \n7\n\n      \nPP\n\n      \nM\n\n      \n24.0\n\n      \n16.0\n\n    \n\n    \n\n      \n33308\n\n      \n33309\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n3\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33309\n\n      \n33310\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n4\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33310\n\n      \n33311\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n5\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33311\n\n      \n33312\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n6\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33312\n\n      \n33313\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n8\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33313\n\n      \n33314\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n9\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33314\n\n      \n33315\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n10\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33315\n\n      \n33316\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n11\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33316\n\n      \n33317\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n13\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33317\n\n      \n33318\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n14\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33318\n\n      \n33319\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n15\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n33319\n\n      \n33320\n\n      \n12\n\n      \n16\n\n      \n2001\n\n      \n16\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n33320 rows \u00d7 9 columns\n\n\n\n\n\nWe can define sets of criteria too:\n\n\nsurveys_df[(surveys_df.year >= 1980) & (surveys_df.year <= 1985)]\n\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n\n\n  \n\n    \n\n      \n\n      \nrecord_id\n\n      \nmonth\n\n      \nday\n\n      \nyear\n\n      \nsite_id\n\n      \nspecies_id\n\n      \nsex\n\n      \nhindfoot_length\n\n      \nweight\n\n    \n\n  \n\n  \n\n    \n\n      \n2270\n\n      \n2271\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n8\n\n      \nDO\n\n      \nM\n\n      \n35.0\n\n      \n53.0\n\n    \n\n    \n\n      \n2271\n\n      \n2272\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nPF\n\n      \nF\n\n      \n16.0\n\n      \n10.0\n\n    \n\n    \n\n      \n2272\n\n      \n2273\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n18\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \n33.0\n\n    \n\n    \n\n      \n2273\n\n      \n2274\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \n37.0\n\n    \n\n    \n\n      \n2274\n\n      \n2275\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n8\n\n      \nDO\n\n      \nF\n\n      \n33.0\n\n      \n29.0\n\n    \n\n    \n\n      \n2275\n\n      \n2276\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nDS\n\n      \nM\n\n      \n47.0\n\n      \n132.0\n\n    \n\n    \n\n      \n2276\n\n      \n2277\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n8\n\n      \nPF\n\n      \nM\n\n      \n15.0\n\n      \n8.0\n\n    \n\n    \n\n      \n2277\n\n      \n2278\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n9\n\n      \nOT\n\n      \nM\n\n      \n21.0\n\n      \n23.0\n\n    \n\n    \n\n      \n2278\n\n      \n2279\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n36.0\n\n    \n\n    \n\n      \n2279\n\n      \n2280\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n21\n\n      \nOT\n\n      \nF\n\n      \n20.0\n\n      \n21.0\n\n    \n\n    \n\n      \n2280\n\n      \n2281\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nOL\n\n      \nM\n\n      \n20.0\n\n      \n29.0\n\n    \n\n    \n\n      \n2281\n\n      \n2282\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n17\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n49.0\n\n    \n\n    \n\n      \n2282\n\n      \n2283\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nOL\n\n      \nM\n\n      \n21.0\n\n      \n23.0\n\n    \n\n    \n\n      \n2283\n\n      \n2284\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n9\n\n      \nOL\n\n      \nM\n\n      \n20.0\n\n      \n32.0\n\n    \n\n    \n\n      \n2284\n\n      \n2285\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n10\n\n      \nOL\n\n      \nF\n\n      \n20.0\n\n      \n24.0\n\n    \n\n    \n\n      \n2285\n\n      \n2286\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \n47.0\n\n    \n\n    \n\n      \n2286\n\n      \n2287\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n21\n\n      \nOT\n\n      \nM\n\n      \n19.0\n\n      \n22.0\n\n    \n\n    \n\n      \n2287\n\n      \n2288\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n19\n\n      \nRM\n\n      \nF\n\n      \n17.0\n\n      \n12.0\n\n    \n\n    \n\n      \n2288\n\n      \n2289\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n20\n\n      \nDS\n\n      \nF\n\n      \n52.0\n\n      \n150.0\n\n    \n\n    \n\n      \n2289\n\n      \n2290\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n49.0\n\n    \n\n    \n\n      \n2290\n\n      \n2291\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n9\n\n      \nOL\n\n      \nF\n\n      \n21.0\n\n      \n34.0\n\n    \n\n    \n\n      \n2291\n\n      \n2292\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n12\n\n      \nDM\n\n      \nF\n\n      \n35.0\n\n      \n40.0\n\n    \n\n    \n\n      \n2292\n\n      \n2293\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n18\n\n      \nDS\n\n      \nF\n\n      \n51.0\n\n      \n132.0\n\n    \n\n    \n\n      \n2293\n\n      \n2294\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n22\n\n      \nDM\n\n      \nF\n\n      \n34.0\n\n      \n25.0\n\n    \n\n    \n\n      \n2294\n\n      \n2295\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n9\n\n      \nOL\n\n      \nM\n\n      \n21.0\n\n      \n36.0\n\n    \n\n    \n\n      \n2295\n\n      \n2296\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n8\n\n      \nDO\n\n      \nF\n\n      \n34.0\n\n      \n50.0\n\n    \n\n    \n\n      \n2296\n\n      \n2297\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n45.0\n\n    \n\n    \n\n      \n2297\n\n      \n2298\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n17\n\n      \nDM\n\n      \nM\n\n      \n35.0\n\n      \n47.0\n\n    \n\n    \n\n      \n2298\n\n      \n2299\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n9\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \n46.0\n\n    \n\n    \n\n      \n2299\n\n      \n2300\n\n      \n1\n\n      \n15\n\n      \n1980\n\n      \n18\n\n      \nDM\n\n      \nF\n\n      \n32.0\n\n      \n29.0\n\n    \n\n    \n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n      \n...\n\n    \n\n    \n\n      \n11197\n\n      \n11198\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n4\n\n      \nDS\n\n      \nM\n\n      \n45.0\n\n      \n129.0\n\n    \n\n    \n\n      \n11198\n\n      \n11199\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n8\n\n      \nDM\n\n      \nF\n\n      \n38.0\n\n      \n42.0\n\n    \n\n    \n\n      \n11199\n\n      \n11200\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n7\n\n      \nAB\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n11200\n\n      \n11201\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n5\n\n      \nOL\n\n      \nM\n\n      \n21.0\n\n      \n29.0\n\n    \n\n    \n\n      \n11201\n\n      \n11202\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n9\n\n      \nDM\n\n      \nF\n\n      \n35.0\n\n      \n39.0\n\n    \n\n    \n\n      \n11202\n\n      \n11203\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n7\n\n      \nPE\n\n      \nF\n\n      \n17.0\n\n      \n19.0\n\n    \n\n    \n\n      \n11203\n\n      \n11204\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n3\n\n      \nPP\n\n      \nF\n\n      \n22.0\n\n      \n16.0\n\n    \n\n    \n\n      \n11204\n\n      \n11205\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n5\n\n      \nDO\n\n      \nM\n\n      \n37.0\n\n      \n56.0\n\n    \n\n    \n\n      \n11205\n\n      \n11206\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n11\n\n      \nDM\n\n      \nF\n\n      \n38.0\n\n      \n38.0\n\n    \n\n    \n\n      \n11206\n\n      \n11207\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n2\n\n      \nPE\n\n      \nM\n\n      \n18.0\n\n      \n19.0\n\n    \n\n    \n\n      \n11207\n\n      \n11208\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n8\n\n      \nDS\n\n      \nF\n\n      \n50.0\n\n      \n120.0\n\n    \n\n    \n\n      \n11208\n\n      \n11209\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n2\n\n      \nDO\n\n      \nF\n\n      \n37.0\n\n      \n52.0\n\n    \n\n    \n\n      \n11209\n\n      \n11210\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n2\n\n      \nDM\n\n      \nF\n\n      \n35.0\n\n      \n40.0\n\n    \n\n    \n\n      \n11210\n\n      \n11211\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n13\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n45.0\n\n    \n\n    \n\n      \n11211\n\n      \n11212\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n4\n\n      \nDS\n\n      \nNaN\n\n      \nNaN\n\n      \n121.0\n\n    \n\n    \n\n      \n11212\n\n      \n11213\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n13\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n11213\n\n      \n11214\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n1\n\n      \nDM\n\n      \nF\n\n      \n37.0\n\n      \n44.0\n\n    \n\n    \n\n      \n11214\n\n      \n11215\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n2\n\n      \nNL\n\n      \nF\n\n      \n32.0\n\n      \n160.0\n\n    \n\n    \n\n      \n11215\n\n      \n11216\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n3\n\n      \nRM\n\n      \nM\n\n      \n17.0\n\n      \n9.0\n\n    \n\n    \n\n      \n11216\n\n      \n11217\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n4\n\n      \nOL\n\n      \nM\n\n      \n24.0\n\n      \n34.0\n\n    \n\n    \n\n      \n11217\n\n      \n11218\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n9\n\n      \nDM\n\n      \nF\n\n      \n36.0\n\n      \n39.0\n\n    \n\n    \n\n      \n11218\n\n      \n11219\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n8\n\n      \nDM\n\n      \nF\n\n      \n38.0\n\n      \n41.0\n\n    \n\n    \n\n      \n11219\n\n      \n11220\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n5\n\n      \nDO\n\n      \nF\n\n      \n37.0\n\n      \n56.0\n\n    \n\n    \n\n      \n11220\n\n      \n11221\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n13\n\n      \nAH\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n11221\n\n      \n11222\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n7\n\n      \nAB\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n    \n\n      \n11222\n\n      \n11223\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n4\n\n      \nDM\n\n      \nM\n\n      \n36.0\n\n      \n40.0\n\n    \n\n    \n\n      \n11223\n\n      \n11224\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n11\n\n      \nDM\n\n      \nM\n\n      \n37.0\n\n      \n49.0\n\n    \n\n    \n\n      \n11224\n\n      \n11225\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n7\n\n      \nPE\n\n      \nM\n\n      \n20.0\n\n      \n18.0\n\n    \n\n    \n\n      \n11225\n\n      \n11226\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n1\n\n      \nDM\n\n      \nM\n\n      \n38.0\n\n      \n47.0\n\n    \n\n    \n\n      \n11226\n\n      \n11227\n\n      \n12\n\n      \n8\n\n      \n1985\n\n      \n15\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n      \nNaN\n\n    \n\n  \n\n\n\n\n8957 rows \u00d7 9 columns\n\n\n\n\n\nPython Syntax Cheat Sheet\n\n\nUse can use the syntax below when querying data by criteria from a DataFrame.\nExperiment with selecting various subsets of the \"surveys\" data.\n\n\n\n\nEquals: \n==\n\n\nNot equals: \n!=\n\n\nGreater than, less than: \n>\n or \n<\n\n\nGreater than or equal to \n>=\n\n\nLess than or equal to \n<=\n\n\n\n\nChallenge - Queries\n\n\n\n\n\n\nSelect a subset of rows in the \nsurveys_df\n DataFrame that contain data from\n   the year 1999 and that contain weight values less than or equal to 8. How\n   many rows did you end up with? What did your neighbor get?\n\n\n\n\n\n\n(Extra)\n Use the \nisin\n function to find all plots that contain \nPB\n and \nPL\n species\nin the \"surveys\" DataFrame. How many records contain these values?\n\n\n\n\n\n\nYou can use the \nisin\n command in Python to query a DataFrame based upon a\n   list of values as follows:\n\n\nsurveys_df[surveys_df['species_id'].isin([listGoesHere])]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtra Challenges\n\n\n\n\n\n\n(Extra)\n Create a query that finds all rows with a\n   weight value greater than (\n>\n) or equal to 0.\n\n\n\n\n\n\n(Extra)\n The \n~\n symbol in Python can be used to return the OPPOSITE of the\n   selection that you specify in Python. It is equivalent to \nis not in\n.\n   Write a query that selects all rows with sex NOT equal to 'M' or 'F' in\n   the \"surveys\" data.\n\n\n\n\n\n\n\n\n\n\n\n\nUsing masks to identify a specific condition\n\n\nA \nmask\n can be useful to locate where a particular subset of values exist or\ndon't exist - for example,  NaN, or \"Not a Number\" values. To understand masks,\nwe also need to understand \nBOOLEAN\n objects in Python.\n\n\nBoolean values include \nTrue\n or \nFalse\n. For example,\n\n\n# Set x to 5\nx = 5\n\n\n\n\n# What does the code below return?\nx > 5\n\n\n\n\n\n\noutput\n\n\n\nFalse\n\n\n\n\n\n\n# How about this?\nx == 5\n\n\n\n\n\n\noutput\n\n\n\nTrue\n\n\n\n\n\n\nExtra Challenges - Putting it all together\n\n\n\n\n\n\nCreate a new DataFrame that only contains observations with sex values that\n   are \nnot\n female or male. Assign each sex value in the new DataFrame to a\n   new value of 'x'. Determine the number of null values in the subset.\n\n\n\n\n\n\nCreate a new DataFrame that contains only observations that are of sex male\n   or female and where weight values are greater than 0. Create a stacked bar\n   plot of average weight by plot with male vs female values stacked for each\n   plot.\n\n\n\n\nCount the number of missing values per column. Hint: The method .count() gives you the number of non-NA observations per column. \n\n\n\n\n\n\n\n\n\n\n\n\n\n# Solution extra challenge 2\n\n# selection of the data with isin\nstack_selection = surveys_df[(surveys_df['sex'].isin(['M', 'F'])) &\n                            surveys_df[\"weight\"] > 0.][[\"sex\", \"weight\", \"site_id\"]]\n\n# calculate the mean weight for each site id and sex combination:\nstack_selection = stack_selection.groupby([\"site_id\", \"sex\"]).mean().unstack()\n\n# Plot inside jupyter notebook\n%matplotlib inline\n\n# and we can make a stacked bar plot from this:\nstack_selection.plot(kind='bar', stacked=True)\n\n\n\n\n\n\noutput",
            "title": "Indexing"
        },
        {
            "location": "/modules/indexing/#indexing-slicing-and-subsetting",
            "text": "In this lesson, we will explore  ways to access different parts of the data  in a Pandas DataFrame using:   Indexing,  Slicing, and  Subsetting",
            "title": "Indexing, Slicing and Subsetting"
        },
        {
            "location": "/modules/indexing/#ensure-the-pandas-package-is-installed",
            "text": "!pip install pandas matplotlib   output  \nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: matplotlib in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (2.2.2)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (0.10.0)\nRequirement already satisfied: six>=1.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.11.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (1.0.1)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib) (2.2.0)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib) (39.1.0)",
            "title": "Ensure the Pandas package is installed"
        },
        {
            "location": "/modules/indexing/#loading-our-data",
            "text": "We will continue to use the surveys dataset that we worked with in the last lesson. Let's reopen and read in the data again:  # Make sure pandas is loaded\nimport pandas as pd\n\n# Read in the survey CSV\nsurveys_df = pd.read_csv(\"data/surveys.csv\")",
            "title": "Loading our data"
        },
        {
            "location": "/modules/indexing/#indexing-and-slicing-in-python",
            "text": "We often want to work with subsets of a  DataFrame  object. There are\ndifferent ways to accomplish this including: using labels (column headings),\nnumeric ranges, or specific x,y index locations.",
            "title": "Indexing and Slicing in Python"
        },
        {
            "location": "/modules/indexing/#selecting-data-using-labels-column-headings",
            "text": "We use square brackets  []  to select a subset of an Python object. For example,\nwe can select all data from a column named  species_id  from the  surveys_df \nDataFrame by name. There are two ways to do this:  # Method 1: select a 'subset' of the data using the column name\nsurveys_df['species_id'].head()   output  \n0    NL\n1    NL\n2    DM\n3    DM\n4    DM\nName: species_id, dtype: object   # Method 2: use the column name as an 'attribute'; gives the same output\nsurveys_df.species_id.head()   output  \n0    NL\n1    NL\n2    DM\n3    DM\n4    DM\nName: species_id, dtype: object   We can also create a new object that contains only the data within the species_id  column as follows:  # Creates an object, surveys_species, that only contains the `species_id` column\nsurveys_species = surveys_df['species_id']  We can pass a list of column names too, as an index to select columns in that\norder. This is useful when we need to reorganize our data.  NOTE:  If a column name is not contained in the DataFrame, an exception\n(error) will be raised.  # Select the species and plot columns from the DataFrame\nsurveys_df[['species_id', 'site_id']].head()   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       species_id \n       site_id \n     \n   \n   \n     \n       0 \n       NL \n       2 \n     \n     \n       1 \n       NL \n       3 \n     \n     \n       2 \n       DM \n       2 \n     \n     \n       3 \n       DM \n       7 \n     \n     \n       4 \n       DM \n       3 \n     \n      \n# What happens if you ask for a column that doesn't exist?\nsurveys_df['speciess']  ---------------------------------------------------------------------------\n\nKeyError                                  Traceback (most recent call last)\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)\n   3062             try:\n-> 3063                 return self._engine.get_loc(key)\n   3064             except KeyError:\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\nKeyError: 'speciess'\n\n\nDuring handling of the above exception, another exception occurred:\n\n\nKeyError                                  Traceback (most recent call last)\n\n<ipython-input-7-8c68e7647ac0> in <module>()\n      1 \n      2 # What happens if you ask for a column that doesn't exist?\n----> 3 surveys_df['speciess']\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/frame.py in __getitem__(self, key)\n   2683             return self._getitem_multilevel(key)\n   2684         else:\n-> 2685             return self._getitem_column(key)\n   2686 \n   2687     def _getitem_column(self, key):\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/frame.py in _getitem_column(self, key)\n   2690         # get column\n   2691         if self.columns.is_unique:\n-> 2692             return self._get_item_cache(key)\n   2693 \n   2694         # duplicate columns & possible reduce dimensionality\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/generic.py in _get_item_cache(self, item)\n   2484         res = cache.get(item)\n   2485         if res is None:\n-> 2486             values = self._data.get(item)\n   2487             res = self._box_item_values(item, values)\n   2488             cache[item] = res\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/internals.py in get(self, item, fastpath)\n   4113 \n   4114             if not isna(item):\n-> 4115                 loc = self.items.get_loc(item)\n   4116             else:\n   4117                 indexer = np.arange(len(self.items))[isna(self.items)]\n\n\n~/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/indexes/base.py in get_loc(self, key, method, tolerance)\n   3063                 return self._engine.get_loc(key)\n   3064             except KeyError:\n-> 3065                 return self._engine.get_loc(self._maybe_cast_indexer(key))\n   3066 \n   3067         indexer = self.get_indexer([key], method=method, tolerance=tolerance)\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/index.pyx in pandas._libs.index.IndexEngine.get_loc()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\npandas/_libs/hashtable_class_helper.pxi in pandas._libs.hashtable.PyObjectHashTable.get_item()\n\n\nKeyError: 'speciess'  Python tells us what type of error it is in the traceback, at the bottom it says  KeyError: 'speciess'  which means that  speciess  is not a column name (or Key in the related python data type dictionary).  # What happens when you flip the order?\nsurveys_df[['site_id', 'species_id']].head()   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       site_id \n       species_id \n     \n   \n   \n     \n       0 \n       2 \n       NL \n     \n     \n       1 \n       3 \n       NL \n     \n     \n       2 \n       2 \n       DM \n     \n     \n       3 \n       7 \n       DM \n     \n     \n       4 \n       3 \n       DM",
            "title": "Selecting data using Labels (Column Headings)"
        },
        {
            "location": "/modules/indexing/#extracting-range-based-subsets-slicing",
            "text": "REMINDER : Python Uses 0-based Indexing  Let's remind ourselves that Python uses 0-based\nindexing. This means that the first element in an object is located at position\n0. This is different from other tools like R and Matlab that index elements\nwithin objects starting at 1.  # Create a list of numbers:\na = [1, 2, 3, 4, 5]",
            "title": "Extracting Range based Subsets: Slicing"
        },
        {
            "location": "/modules/indexing/#challenge-extracting-data",
            "text": "What value does the code  a[0]  return?    How about this:  a[5]    In the example above, calling  a[5]  returns an error. Why is that?    What about  a[len(a)]  ?",
            "title": "Challenge - Extracting data"
        },
        {
            "location": "/modules/indexing/#solutions-extracting-data",
            "text": "",
            "title": "Solutions - Extracting data"
        },
        {
            "location": "/modules/indexing/#slicing-subsets-of-rows-in-python",
            "text": "Slicing using the  []  operator selects a set of rows and/or columns from a\nDataFrame. To slice out a set of rows, you use the following syntax: data[start:stop] . When slicing in pandas the start bound is included in the\noutput. The stop bound is one step BEYOND the row you want to select. So if you\nwant to select rows 0, 1 and 2 your code would look like this with our  surveys data :  # Select rows 0, 1, 2 (row 3 is not selected)\nsurveys_df[0:3]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       1 \n       2 \n       7 \n       16 \n       1977 \n       3 \n       NL \n       M \n       33.0 \n       NaN \n     \n     \n       2 \n       3 \n       7 \n       16 \n       1977 \n       2 \n       DM \n       F \n       37.0 \n       NaN \n     \n      The stop bound in Python is different from what you might be used to in\nlanguages like Matlab and R.  Now lets select the  first 5 rows (rows 0, 1, 2, 3, 4) .  surveys_df[:5]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       1 \n       2 \n       7 \n       16 \n       1977 \n       3 \n       NL \n       M \n       33.0 \n       NaN \n     \n     \n       2 \n       3 \n       7 \n       16 \n       1977 \n       2 \n       DM \n       F \n       37.0 \n       NaN \n     \n     \n       3 \n       4 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       4 \n       5 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n      # Select the last element in the list\n# (the slice starts at the last element, and ends at the end of the list)\nsurveys_df[-1:]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       35548 \n       35549 \n       12 \n       31 \n       2002 \n       5 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n      We can also reassign values within subsets of our DataFrame.  Let's create a brand new clean dataframe from\nthe original data CSV file.  surveys_df = pd.read_csv(\"data/surveys.csv\")",
            "title": "Slicing Subsets of Rows in Python"
        },
        {
            "location": "/modules/indexing/#slicing-subsets-of-rows-and-columns-in-python",
            "text": "We can select specific ranges of our data in both the row and column directions\nusing either label or integer-based indexing.   loc  is primarily  label  based indexing.  Integers  may be used but\n  they are interpreted as a  label .  iloc  is primarily  integer  based indexing   To select a subset of rows  and  columns from our DataFrame, we can use the iloc  method. For example, we can select month, day and year (columns 2, 3\nand 4 if we start counting at 1), like this:  iloc[row slicing, column slicing]  surveys_df.iloc[0:3, 1:4]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       month \n       day \n       year \n     \n   \n   \n     \n       0 \n       7 \n       16 \n       1977 \n     \n     \n       1 \n       7 \n       16 \n       1977 \n     \n     \n       2 \n       7 \n       16 \n       1977 \n     \n      Notice that we asked for a slice from 0:3. This yielded 3 rows of data. When you\nask for 0:3, you are actually telling Python to start at index 0 and select rows\n0, 1, 2  up to but not including 3 .  Let's explore some other ways to index and select subsets of data:  # Select all columns for rows of index values 0 and 10\nsurveys_df.loc[[0, 10], :]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       10 \n       11 \n       7 \n       16 \n       1977 \n       5 \n       DS \n       F \n       53.0 \n       NaN \n     \n      # What does this do?\nsurveys_df.loc[0, ['species_id', 'site_id', 'weight']]   output  \nspecies_id     NL\nsite_id         2\nweight        NaN\nName: 0, dtype: object   # What happens when you type the code below?\nsurveys_df.loc[[0, 10, 35549], :]   output  \n/Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/pandas/core/indexing.py:1472: FutureWarning: \nPassing list-likes to .loc or [] with any missing label will raise\nKeyError in the future, you can use .reindex() as an alternative.\n\nSee the documentation here:\nhttps://pandas.pydata.org/pandas-docs/stable/indexing.html#deprecate-loc-reindex-listlike\n  return self._getitem_tuple(key)    \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1.0 \n       7.0 \n       16.0 \n       1977.0 \n       2.0 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       10 \n       11.0 \n       7.0 \n       16.0 \n       1977.0 \n       5.0 \n       DS \n       F \n       53.0 \n       NaN \n     \n     \n       35549 \n       NaN \n       NaN \n       NaN \n       NaN \n       NaN \n       NaN \n       NaN \n       NaN \n       NaN \n     \n      NOTE : Labels must be found in the DataFrame or you will get a  KeyError .  Indexing by labels  loc  differs from indexing by integers  iloc .\nWith  loc , the both start bound and the stop bound are  inclusive . When using loc , integers  can  be used, but the integers refer to the\nindex label and not the position. For example, using  loc  and select 1:4\nwill get a different result than using  iloc  to select rows 1:4.  We can also select a specific data value using a row and\ncolumn location within the DataFrame and  iloc  indexing:  # Syntax for iloc indexing to finding a specific data element\ndat.iloc[row, column]  In following iloc example:  surveys_df.iloc[2, 6]   output  \n'F'   Remember that Python indexing begins at 0. So, the index location [2, 6]\nselects the element that is 3 rows down and 7 columns over in the DataFrame.",
            "title": "Slicing Subsets of Rows and Columns in Python"
        },
        {
            "location": "/modules/indexing/#challenge-range",
            "text": "What happens when you execute:   surveys_df[0:1]  surveys_df[:4]  surveys_df[:-1]     What happens when you call:   surveys_df.iloc[0:4, 1:4]",
            "title": "Challenge - Range"
        },
        {
            "location": "/modules/indexing/#subsetting-data-using-criteria",
            "text": "We can also select a subset of our data using criteria. For example, we can\nselect all rows that  have a year value of 2002 :  surveys_df[surveys_df.year == 2002].head()   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       33320 \n       33321 \n       1 \n       12 \n       2002 \n       1 \n       DM \n       M \n       38.0 \n       44.0 \n     \n     \n       33321 \n       33322 \n       1 \n       12 \n       2002 \n       1 \n       DO \n       M \n       37.0 \n       58.0 \n     \n     \n       33322 \n       33323 \n       1 \n       12 \n       2002 \n       1 \n       PB \n       M \n       28.0 \n       45.0 \n     \n     \n       33323 \n       33324 \n       1 \n       12 \n       2002 \n       1 \n       AB \n       NaN \n       NaN \n       NaN \n     \n     \n       33324 \n       33325 \n       1 \n       12 \n       2002 \n       1 \n       DO \n       M \n       35.0 \n       29.0 \n     \n      Or we can select all rows that  do not contain the year 2002 :  surveys_df[surveys_df.year != 2002]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       0 \n       1 \n       7 \n       16 \n       1977 \n       2 \n       NL \n       M \n       32.0 \n       NaN \n     \n     \n       1 \n       2 \n       7 \n       16 \n       1977 \n       3 \n       NL \n       M \n       33.0 \n       NaN \n     \n     \n       2 \n       3 \n       7 \n       16 \n       1977 \n       2 \n       DM \n       F \n       37.0 \n       NaN \n     \n     \n       3 \n       4 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       4 \n       5 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       5 \n       6 \n       7 \n       16 \n       1977 \n       1 \n       PF \n       M \n       14.0 \n       NaN \n     \n     \n       6 \n       7 \n       7 \n       16 \n       1977 \n       2 \n       PE \n       F \n       NaN \n       NaN \n     \n     \n       7 \n       8 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       M \n       37.0 \n       NaN \n     \n     \n       8 \n       9 \n       7 \n       16 \n       1977 \n       1 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       9 \n       10 \n       7 \n       16 \n       1977 \n       6 \n       PF \n       F \n       20.0 \n       NaN \n     \n     \n       10 \n       11 \n       7 \n       16 \n       1977 \n       5 \n       DS \n       F \n       53.0 \n       NaN \n     \n     \n       11 \n       12 \n       7 \n       16 \n       1977 \n       7 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       12 \n       13 \n       7 \n       16 \n       1977 \n       3 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       13 \n       14 \n       7 \n       16 \n       1977 \n       8 \n       DM \n       NaN \n       NaN \n       NaN \n     \n     \n       14 \n       15 \n       7 \n       16 \n       1977 \n       6 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       15 \n       16 \n       7 \n       16 \n       1977 \n       4 \n       DM \n       F \n       36.0 \n       NaN \n     \n     \n       16 \n       17 \n       7 \n       16 \n       1977 \n       3 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       17 \n       18 \n       7 \n       16 \n       1977 \n       2 \n       PP \n       M \n       22.0 \n       NaN \n     \n     \n       18 \n       19 \n       7 \n       16 \n       1977 \n       4 \n       PF \n       NaN \n       NaN \n       NaN \n     \n     \n       19 \n       20 \n       7 \n       17 \n       1977 \n       11 \n       DS \n       F \n       48.0 \n       NaN \n     \n     \n       20 \n       21 \n       7 \n       17 \n       1977 \n       14 \n       DM \n       F \n       34.0 \n       NaN \n     \n     \n       21 \n       22 \n       7 \n       17 \n       1977 \n       15 \n       NL \n       F \n       31.0 \n       NaN \n     \n     \n       22 \n       23 \n       7 \n       17 \n       1977 \n       13 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       23 \n       24 \n       7 \n       17 \n       1977 \n       13 \n       SH \n       M \n       21.0 \n       NaN \n     \n     \n       24 \n       25 \n       7 \n       17 \n       1977 \n       9 \n       DM \n       M \n       35.0 \n       NaN \n     \n     \n       25 \n       26 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       31.0 \n       NaN \n     \n     \n       26 \n       27 \n       7 \n       17 \n       1977 \n       15 \n       DM \n       M \n       36.0 \n       NaN \n     \n     \n       27 \n       28 \n       7 \n       17 \n       1977 \n       11 \n       DM \n       M \n       38.0 \n       NaN \n     \n     \n       28 \n       29 \n       7 \n       17 \n       1977 \n       11 \n       PP \n       M \n       NaN \n       NaN \n     \n     \n       29 \n       30 \n       7 \n       17 \n       1977 \n       10 \n       DS \n       F \n       52.0 \n       NaN \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       33290 \n       33291 \n       12 \n       15 \n       2001 \n       23 \n       PE \n       M \n       20.0 \n       18.0 \n     \n     \n       33291 \n       33292 \n       12 \n       15 \n       2001 \n       23 \n       RM \n       F \n       16.0 \n       8.0 \n     \n     \n       33292 \n       33293 \n       12 \n       15 \n       2001 \n       20 \n       PE \n       F \n       20.0 \n       22.0 \n     \n     \n       33293 \n       33294 \n       12 \n       15 \n       2001 \n       20 \n       SH \n       M \n       25.0 \n       43.0 \n     \n     \n       33294 \n       33295 \n       12 \n       15 \n       2001 \n       20 \n       PB \n       F \n       27.0 \n       33.0 \n     \n     \n       33295 \n       33296 \n       12 \n       15 \n       2001 \n       20 \n       PB \n       M \n       25.0 \n       35.0 \n     \n     \n       33296 \n       33297 \n       12 \n       15 \n       2001 \n       20 \n       RM \n       M \n       16.0 \n       11.0 \n     \n     \n       33297 \n       33298 \n       12 \n       15 \n       2001 \n       20 \n       RM \n       F \n       16.0 \n       8.0 \n     \n     \n       33298 \n       33299 \n       12 \n       15 \n       2001 \n       20 \n       PB \n       F \n       25.0 \n       28.0 \n     \n     \n       33299 \n       33300 \n       12 \n       15 \n       2001 \n       20 \n       PB \n       F \n       26.0 \n       30.0 \n     \n     \n       33300 \n       33301 \n       12 \n       15 \n       2001 \n       20 \n       PB \n       F \n       27.0 \n       31.0 \n     \n     \n       33301 \n       33302 \n       12 \n       15 \n       2001 \n       24 \n       PE \n       M \n       20.0 \n       24.0 \n     \n     \n       33302 \n       33303 \n       12 \n       15 \n       2001 \n       24 \n       PE \n       M \n       20.0 \n       23.0 \n     \n     \n       33303 \n       33304 \n       12 \n       15 \n       2001 \n       24 \n       RM \n       M \n       16.0 \n       10.0 \n     \n     \n       33304 \n       33305 \n       12 \n       15 \n       2001 \n       7 \n       PB \n       M \n       29.0 \n       44.0 \n     \n     \n       33305 \n       33306 \n       12 \n       15 \n       2001 \n       7 \n       OT \n       M \n       19.0 \n       21.0 \n     \n     \n       33306 \n       33307 \n       12 \n       15 \n       2001 \n       7 \n       OT \n       M \n       20.0 \n       19.0 \n     \n     \n       33307 \n       33308 \n       12 \n       15 \n       2001 \n       7 \n       PP \n       M \n       24.0 \n       16.0 \n     \n     \n       33308 \n       33309 \n       12 \n       16 \n       2001 \n       3 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33309 \n       33310 \n       12 \n       16 \n       2001 \n       4 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33310 \n       33311 \n       12 \n       16 \n       2001 \n       5 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33311 \n       33312 \n       12 \n       16 \n       2001 \n       6 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33312 \n       33313 \n       12 \n       16 \n       2001 \n       8 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33313 \n       33314 \n       12 \n       16 \n       2001 \n       9 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33314 \n       33315 \n       12 \n       16 \n       2001 \n       10 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33315 \n       33316 \n       12 \n       16 \n       2001 \n       11 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33316 \n       33317 \n       12 \n       16 \n       2001 \n       13 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33317 \n       33318 \n       12 \n       16 \n       2001 \n       14 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33318 \n       33319 \n       12 \n       16 \n       2001 \n       15 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     \n       33319 \n       33320 \n       12 \n       16 \n       2001 \n       16 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     33320 rows \u00d7 9 columns   We can define sets of criteria too:  surveys_df[(surveys_df.year >= 1980) & (surveys_df.year <= 1985)]   \n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }  \n   \n     \n       \n       record_id \n       month \n       day \n       year \n       site_id \n       species_id \n       sex \n       hindfoot_length \n       weight \n     \n   \n   \n     \n       2270 \n       2271 \n       1 \n       15 \n       1980 \n       8 \n       DO \n       M \n       35.0 \n       53.0 \n     \n     \n       2271 \n       2272 \n       1 \n       15 \n       1980 \n       11 \n       PF \n       F \n       16.0 \n       10.0 \n     \n     \n       2272 \n       2273 \n       1 \n       15 \n       1980 \n       18 \n       DM \n       F \n       34.0 \n       33.0 \n     \n     \n       2273 \n       2274 \n       1 \n       15 \n       1980 \n       11 \n       DM \n       M \n       38.0 \n       37.0 \n     \n     \n       2274 \n       2275 \n       1 \n       15 \n       1980 \n       8 \n       DO \n       F \n       33.0 \n       29.0 \n     \n     \n       2275 \n       2276 \n       1 \n       15 \n       1980 \n       11 \n       DS \n       M \n       47.0 \n       132.0 \n     \n     \n       2276 \n       2277 \n       1 \n       15 \n       1980 \n       8 \n       PF \n       M \n       15.0 \n       8.0 \n     \n     \n       2277 \n       2278 \n       1 \n       15 \n       1980 \n       9 \n       OT \n       M \n       21.0 \n       23.0 \n     \n     \n       2278 \n       2279 \n       1 \n       15 \n       1980 \n       11 \n       DM \n       F \n       36.0 \n       36.0 \n     \n     \n       2279 \n       2280 \n       1 \n       15 \n       1980 \n       21 \n       OT \n       F \n       20.0 \n       21.0 \n     \n     \n       2280 \n       2281 \n       1 \n       15 \n       1980 \n       11 \n       OL \n       M \n       20.0 \n       29.0 \n     \n     \n       2281 \n       2282 \n       1 \n       15 \n       1980 \n       17 \n       DM \n       F \n       36.0 \n       49.0 \n     \n     \n       2282 \n       2283 \n       1 \n       15 \n       1980 \n       11 \n       OL \n       M \n       21.0 \n       23.0 \n     \n     \n       2283 \n       2284 \n       1 \n       15 \n       1980 \n       9 \n       OL \n       M \n       20.0 \n       32.0 \n     \n     \n       2284 \n       2285 \n       1 \n       15 \n       1980 \n       10 \n       OL \n       F \n       20.0 \n       24.0 \n     \n     \n       2285 \n       2286 \n       1 \n       15 \n       1980 \n       11 \n       DM \n       M \n       38.0 \n       47.0 \n     \n     \n       2286 \n       2287 \n       1 \n       15 \n       1980 \n       21 \n       OT \n       M \n       19.0 \n       22.0 \n     \n     \n       2287 \n       2288 \n       1 \n       15 \n       1980 \n       19 \n       RM \n       F \n       17.0 \n       12.0 \n     \n     \n       2288 \n       2289 \n       1 \n       15 \n       1980 \n       20 \n       DS \n       F \n       52.0 \n       150.0 \n     \n     \n       2289 \n       2290 \n       1 \n       15 \n       1980 \n       11 \n       DM \n       M \n       37.0 \n       49.0 \n     \n     \n       2290 \n       2291 \n       1 \n       15 \n       1980 \n       9 \n       OL \n       F \n       21.0 \n       34.0 \n     \n     \n       2291 \n       2292 \n       1 \n       15 \n       1980 \n       12 \n       DM \n       F \n       35.0 \n       40.0 \n     \n     \n       2292 \n       2293 \n       1 \n       15 \n       1980 \n       18 \n       DS \n       F \n       51.0 \n       132.0 \n     \n     \n       2293 \n       2294 \n       1 \n       15 \n       1980 \n       22 \n       DM \n       F \n       34.0 \n       25.0 \n     \n     \n       2294 \n       2295 \n       1 \n       15 \n       1980 \n       9 \n       OL \n       M \n       21.0 \n       36.0 \n     \n     \n       2295 \n       2296 \n       1 \n       15 \n       1980 \n       8 \n       DO \n       F \n       34.0 \n       50.0 \n     \n     \n       2296 \n       2297 \n       1 \n       15 \n       1980 \n       11 \n       DM \n       M \n       37.0 \n       45.0 \n     \n     \n       2297 \n       2298 \n       1 \n       15 \n       1980 \n       17 \n       DM \n       M \n       35.0 \n       47.0 \n     \n     \n       2298 \n       2299 \n       1 \n       15 \n       1980 \n       9 \n       DM \n       M \n       38.0 \n       46.0 \n     \n     \n       2299 \n       2300 \n       1 \n       15 \n       1980 \n       18 \n       DM \n       F \n       32.0 \n       29.0 \n     \n     \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n       ... \n     \n     \n       11197 \n       11198 \n       12 \n       8 \n       1985 \n       4 \n       DS \n       M \n       45.0 \n       129.0 \n     \n     \n       11198 \n       11199 \n       12 \n       8 \n       1985 \n       8 \n       DM \n       F \n       38.0 \n       42.0 \n     \n     \n       11199 \n       11200 \n       12 \n       8 \n       1985 \n       7 \n       AB \n       NaN \n       NaN \n       NaN \n     \n     \n       11200 \n       11201 \n       12 \n       8 \n       1985 \n       5 \n       OL \n       M \n       21.0 \n       29.0 \n     \n     \n       11201 \n       11202 \n       12 \n       8 \n       1985 \n       9 \n       DM \n       F \n       35.0 \n       39.0 \n     \n     \n       11202 \n       11203 \n       12 \n       8 \n       1985 \n       7 \n       PE \n       F \n       17.0 \n       19.0 \n     \n     \n       11203 \n       11204 \n       12 \n       8 \n       1985 \n       3 \n       PP \n       F \n       22.0 \n       16.0 \n     \n     \n       11204 \n       11205 \n       12 \n       8 \n       1985 \n       5 \n       DO \n       M \n       37.0 \n       56.0 \n     \n     \n       11205 \n       11206 \n       12 \n       8 \n       1985 \n       11 \n       DM \n       F \n       38.0 \n       38.0 \n     \n     \n       11206 \n       11207 \n       12 \n       8 \n       1985 \n       2 \n       PE \n       M \n       18.0 \n       19.0 \n     \n     \n       11207 \n       11208 \n       12 \n       8 \n       1985 \n       8 \n       DS \n       F \n       50.0 \n       120.0 \n     \n     \n       11208 \n       11209 \n       12 \n       8 \n       1985 \n       2 \n       DO \n       F \n       37.0 \n       52.0 \n     \n     \n       11209 \n       11210 \n       12 \n       8 \n       1985 \n       2 \n       DM \n       F \n       35.0 \n       40.0 \n     \n     \n       11210 \n       11211 \n       12 \n       8 \n       1985 \n       13 \n       DM \n       M \n       37.0 \n       45.0 \n     \n     \n       11211 \n       11212 \n       12 \n       8 \n       1985 \n       4 \n       DS \n       NaN \n       NaN \n       121.0 \n     \n     \n       11212 \n       11213 \n       12 \n       8 \n       1985 \n       13 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       11213 \n       11214 \n       12 \n       8 \n       1985 \n       1 \n       DM \n       F \n       37.0 \n       44.0 \n     \n     \n       11214 \n       11215 \n       12 \n       8 \n       1985 \n       2 \n       NL \n       F \n       32.0 \n       160.0 \n     \n     \n       11215 \n       11216 \n       12 \n       8 \n       1985 \n       3 \n       RM \n       M \n       17.0 \n       9.0 \n     \n     \n       11216 \n       11217 \n       12 \n       8 \n       1985 \n       4 \n       OL \n       M \n       24.0 \n       34.0 \n     \n     \n       11217 \n       11218 \n       12 \n       8 \n       1985 \n       9 \n       DM \n       F \n       36.0 \n       39.0 \n     \n     \n       11218 \n       11219 \n       12 \n       8 \n       1985 \n       8 \n       DM \n       F \n       38.0 \n       41.0 \n     \n     \n       11219 \n       11220 \n       12 \n       8 \n       1985 \n       5 \n       DO \n       F \n       37.0 \n       56.0 \n     \n     \n       11220 \n       11221 \n       12 \n       8 \n       1985 \n       13 \n       AH \n       NaN \n       NaN \n       NaN \n     \n     \n       11221 \n       11222 \n       12 \n       8 \n       1985 \n       7 \n       AB \n       NaN \n       NaN \n       NaN \n     \n     \n       11222 \n       11223 \n       12 \n       8 \n       1985 \n       4 \n       DM \n       M \n       36.0 \n       40.0 \n     \n     \n       11223 \n       11224 \n       12 \n       8 \n       1985 \n       11 \n       DM \n       M \n       37.0 \n       49.0 \n     \n     \n       11224 \n       11225 \n       12 \n       8 \n       1985 \n       7 \n       PE \n       M \n       20.0 \n       18.0 \n     \n     \n       11225 \n       11226 \n       12 \n       8 \n       1985 \n       1 \n       DM \n       M \n       38.0 \n       47.0 \n     \n     \n       11226 \n       11227 \n       12 \n       8 \n       1985 \n       15 \n       NaN \n       NaN \n       NaN \n       NaN \n     \n     8957 rows \u00d7 9 columns",
            "title": "Subsetting Data using Criteria"
        },
        {
            "location": "/modules/indexing/#python-syntax-cheat-sheet",
            "text": "Use can use the syntax below when querying data by criteria from a DataFrame.\nExperiment with selecting various subsets of the \"surveys\" data.   Equals:  ==  Not equals:  !=  Greater than, less than:  >  or  <  Greater than or equal to  >=  Less than or equal to  <=",
            "title": "Python Syntax Cheat Sheet"
        },
        {
            "location": "/modules/indexing/#challenge-queries",
            "text": "Select a subset of rows in the  surveys_df  DataFrame that contain data from\n   the year 1999 and that contain weight values less than or equal to 8. How\n   many rows did you end up with? What did your neighbor get?    (Extra)  Use the  isin  function to find all plots that contain  PB  and  PL  species\nin the \"surveys\" DataFrame. How many records contain these values?    You can use the  isin  command in Python to query a DataFrame based upon a\n   list of values as follows:  surveys_df[surveys_df['species_id'].isin([listGoesHere])]",
            "title": "Challenge - Queries"
        },
        {
            "location": "/modules/indexing/#extra-challenges",
            "text": "(Extra)  Create a query that finds all rows with a\n   weight value greater than ( > ) or equal to 0.    (Extra)  The  ~  symbol in Python can be used to return the OPPOSITE of the\n   selection that you specify in Python. It is equivalent to  is not in .\n   Write a query that selects all rows with sex NOT equal to 'M' or 'F' in\n   the \"surveys\" data.",
            "title": "Extra Challenges"
        },
        {
            "location": "/modules/indexing/#using-masks-to-identify-a-specific-condition",
            "text": "A  mask  can be useful to locate where a particular subset of values exist or\ndon't exist - for example,  NaN, or \"Not a Number\" values. To understand masks,\nwe also need to understand  BOOLEAN  objects in Python.  Boolean values include  True  or  False . For example,  # Set x to 5\nx = 5  # What does the code below return?\nx > 5   output  \nFalse   # How about this?\nx == 5   output  \nTrue",
            "title": "Using masks to identify a specific condition"
        },
        {
            "location": "/modules/indexing/#extra-challenges-putting-it-all-together",
            "text": "Create a new DataFrame that only contains observations with sex values that\n   are  not  female or male. Assign each sex value in the new DataFrame to a\n   new value of 'x'. Determine the number of null values in the subset.    Create a new DataFrame that contains only observations that are of sex male\n   or female and where weight values are greater than 0. Create a stacked bar\n   plot of average weight by plot with male vs female values stacked for each\n   plot.   Count the number of missing values per column. Hint: The method .count() gives you the number of non-NA observations per column.       # Solution extra challenge 2\n\n# selection of the data with isin\nstack_selection = surveys_df[(surveys_df['sex'].isin(['M', 'F'])) &\n                            surveys_df[\"weight\"] > 0.][[\"sex\", \"weight\", \"site_id\"]]\n\n# calculate the mean weight for each site id and sex combination:\nstack_selection = stack_selection.groupby([\"site_id\", \"sex\"]).mean().unstack()\n\n# Plot inside jupyter notebook\n%matplotlib inline\n\n# and we can make a stacked bar plot from this:\nstack_selection.plot(kind='bar', stacked=True)   output",
            "title": "Extra Challenges - Putting it all together"
        },
        {
            "location": "/modules/loops/",
            "text": ".output_label {\n    text-align: right;\n    margin: -1em;\n    padding: 0;\n    font-size: 0.5em;\n    color: grey\n}\n\n\n\n\nAutomation with Loops\n\n\n\n\n\nAn example task that we might want to repeat is printing each character in a\nword on a line of its own.\n\n\nword = 'lead'\n\n\n\n\nWe can access a character in a string using its index. For example, we can get the first\ncharacter of the word \n'lead'\n, by using \nword[0]\n. One way to print each character is to use\nfour \nprint\n statements:\n\n\nprint(word[0])\nprint(word[1])\nprint(word[2])\nprint(word[3])\n\n\n\n\n\n\noutput\n\n\n\nl\ne\na\nd\n\n\n\n\n\n\n\nWhile this works, it's a bad approach for two reasons:\n\n\n\n\n\n\nIt doesn't scale:\n   if we want to print the characters in a string that's hundreds of letters long,\n   we'd be better off just typing them in.\n\n\n\n\n\n\nIt's fragile:\n   if we give it a longer string,\n   it only prints part of the data,\n   and if we give it a shorter one,\n   it produces an error because we're asking for characters that don't exist.\n\n\n\n\n\n\nRunning:\n\n\nword = 'tin'\nprint(word[0])\nprint(word[1])\nprint(word[2])\nprint(word[3])\n\n\n\n\nGives the error:\n\n\n---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-4-e59d5eac5430> in <module>()\n      3 print(word[1])\n      4 print(word[2])\n----> 5 print(word[3])\n\nIndexError: string index out of range\n\n\n\n\nHere's a better approach:\n\n\nword = 'lead'\nfor char in word:\n    print(char)\n\n\n\n\n\n\noutput\n\n\n\nl\ne\na\nd\n\n\n\n\n\n\n\nThis is shorter --- certainly shorter than something that prints every character in a hundred-letter string --- and\nmore robust as well:\n\n\nword = 'oxygen'\nfor char in word:\n    print(char)\n\n\n\n\n\n\noutput\n\n\n\no\nx\ny\ng\ne\nn\n\n\n\n\n\n\n\nThe improved version uses a \nfor loop\n to repeat an operation --- in this case, printing --- once for each thing in a sequence.\nThe general form of a loop is:\n\n\nfor variable in collection:\n    # do things with variable\n\n\n\n\nUsing the oxygen example above, the loop might look like this:\n\n\n\n\nwhere each character (\nchar\n) in the variable \nword\n is looped through and printed one character after another.\nThe numbers in the diagram denote which loop cycle the character was printed in (1 being the first loop, and 6 being the final loop).\n\n\nWe can call the \nloop variable\n anything we like,\nbut there must be a colon at the end of the line starting the loop, and we must indent anything we want to run inside the loop. Unlike many other languages, there is no command to signify the end of the loop body (e.g. \nend for\n); what is indented after the \nfor\n statement belongs to the loop.\n\n\nWhat's in a name?\n\n\nIn the example above, the loop variable was given the name \nchar\n as a mnemonic; it is short for 'character'. \nWe can choose any name we want for variables. We might just as easily have chosen the name \nbanana\n for the loop variable, as long as we use the same name when we invoke the variable inside the loop:\n\n\nword = 'oxygen'\nfor banana in word:\n    print(banana)\n\n\n\n\n\n\noutput\n\n\n\no\nx\ny\ng\ne\nn\n\n\n\n\n\n\n\nIt is a good idea to choose variable names that are meaningful, otherwise it would be more difficult to understand what the loop is doing.\n\n\nHere's another loop that repeatedly updates a variable:\n\n\nlength = 0\nfor vowel in 'aeiou':\n    length = length + 1\nprint('There are', length, 'vowels')\n\n\n\n\n\n\noutput\n\n\n\nThere are 5 vowels\n\n\n\n\n\n\n\nIt's worth tracing the execution of this little program step by step.\n\n\nSince there are five characters in \n'aeiou'\n,\nthe statement on line 3 will be executed five times.\n\n\nThe first time around,\n\nlength\n is zero (the value assigned to it on line 1)\nand \nvowel\n is \n'a'\n.\nThe statement adds 1 to the old value of \nlength\n,\nproducing 1,\nand updates \nlength\n to refer to that new value.\n\n\nThe next time around,\n\nvowel\n is \n'e'\n and \nlength\n is 1,\nso \nlength\n is updated to be 2.\n\n\nAfter three more updates,\n\nlength\n is 5;\nsince there is nothing left in \n'aeiou'\n for Python to process,\nthe loop finishes\nand the \nprint\n statement on line 4 tells us our final answer.\n\n\nNote that a loop variable is just a variable that's being used to record progress in a loop.\nIt still exists after the loop is over,\nand we can re-use variables previously defined as loop variables as well:\n\n\nletter = 'z'\nfor letter in 'abc':\n    print(letter)\nprint('after the loop, letter is', letter)\n\n\n\n\n\n\noutput\n\n\n\na\nb\nc\nafter the loop, letter is c\n\n\n\n\n\n\n\nNote also that finding the length of a string is such a common operation that Python actually has a built-in function to do it called \nlen\n:\n\n\nprint(len('aeiou'))\n\n\n\n\n\n\noutput\n\n\n\n5\n\n\n\n\n\n\n\nlen\n is much faster than any function we could write ourselves,\nand much easier to read than a two-line loop;\nit will also give us the length of many other things that we haven't met yet,\nso we should always use it when we can.\n\n\nFrom 1 to N\n\n\nPython has a built-in function called \nrange\n that creates a sequence of numbers. \nrange\n can\naccept 1, 2, or 3 parameters.\n\n\n\n\nIf one parameter is given, \nrange\n creates an array of that length,\n  starting at zero and incrementing by 1.\n  For example, \nrange(3)\n produces the numbers \n0, 1, 2\n.\n\n\nIf two parameters are given, \nrange\n starts at\n  the first and ends just before the second, incrementing by one.\n  For example, \nrange(2, 5)\n produces \n2, 3, 4\n.\n\n\nIf \nrange\n is given 3 parameters,\n  it starts at the first one, ends just before the second one, and increments by the third one.\n  For exmaple \nrange(3, 10, 2)\n produces \n3, 5, 7, 9\n.\n\n\n\n\nChallenge - loop over a range\n\n\nUsing \nrange\n,\nwrite a loop that uses \nrange\n to print the first 3 natural numbers:\n\n\n1\n2\n3\n\n\n\n\n\n\n\n\n\n\nComputing Powers With Loops\n\n\nExponentiation is built into Python:\n\n\nprint(5 ** 3)\n\n\n\n\n\n\noutput\n\n\n\n125\n\n\n\n\n\n\n\nChallenge - multiplication in a loop\n\n\nWrite a loop that calculates the same result as \n5 ** 3\n using\nmultiplication (and without exponentiation).\n\n\n\n\n\n\n\n\nChallenge  - reverse a string\n\n\nKnowing that two strings can be concatenated using the \n+\n operator,\nwrite a loop that takes a string\nand produces a new string with the characters in reverse order,\nso \n'Newton'\n becomes \n'notweN'\n.\n\n\n\n\n\n\n\n\nComputing the Value of a Polynomial\n\n\nThe built-in function \nenumerate\n takes a sequence (e.g. a list) and generates a\nnew sequence of the same length. Each element of the new sequence is a pair composed of the index\n(0, 1, 2,...) and the value from the original sequence:\n\n\nfor i, x in enumerate(xs):\n    # Do something with i and x\n\n\n\n\nThe code above loops through \nxs\n, assigning the index to \ni\n and the value to \nx\n.\n\n\nChallenge - enumeration\n\n\nSuppose you have encoded a polynomial as a list of coefficients in\nthe following way: the first element is the constant term, the\nsecond element is the coefficient of the linear term, the third is the\ncoefficient of the quadratic term, etc.\n\n\nx = 5\ncc = [2, 4, 3]\n\n\n\n\ny = cc[0] * x**0 + cc[1] * x**1 + cc[2] * x**2\ny = 97\n\n\n\n\nWrite a loop using \nenumerate(cc)\n which computes the value \ny\n of any\npolynomial, given \nx\n and \ncc\n.",
            "title": "Loops"
        },
        {
            "location": "/modules/loops/#automation-with-loops",
            "text": "An example task that we might want to repeat is printing each character in a\nword on a line of its own.  word = 'lead'  We can access a character in a string using its index. For example, we can get the first\ncharacter of the word  'lead' , by using  word[0] . One way to print each character is to use\nfour  print  statements:  print(word[0])\nprint(word[1])\nprint(word[2])\nprint(word[3])   output  \nl\ne\na\nd   While this works, it's a bad approach for two reasons:    It doesn't scale:\n   if we want to print the characters in a string that's hundreds of letters long,\n   we'd be better off just typing them in.    It's fragile:\n   if we give it a longer string,\n   it only prints part of the data,\n   and if we give it a shorter one,\n   it produces an error because we're asking for characters that don't exist.    Running:  word = 'tin'\nprint(word[0])\nprint(word[1])\nprint(word[2])\nprint(word[3])  Gives the error:  ---------------------------------------------------------------------------\nIndexError                                Traceback (most recent call last)\n<ipython-input-4-e59d5eac5430> in <module>()\n      3 print(word[1])\n      4 print(word[2])\n----> 5 print(word[3])\n\nIndexError: string index out of range  Here's a better approach:  word = 'lead'\nfor char in word:\n    print(char)   output  \nl\ne\na\nd   This is shorter --- certainly shorter than something that prints every character in a hundred-letter string --- and\nmore robust as well:  word = 'oxygen'\nfor char in word:\n    print(char)   output  \no\nx\ny\ng\ne\nn   The improved version uses a  for loop  to repeat an operation --- in this case, printing --- once for each thing in a sequence.\nThe general form of a loop is:  for variable in collection:\n    # do things with variable  Using the oxygen example above, the loop might look like this:   where each character ( char ) in the variable  word  is looped through and printed one character after another.\nThe numbers in the diagram denote which loop cycle the character was printed in (1 being the first loop, and 6 being the final loop).  We can call the  loop variable  anything we like,\nbut there must be a colon at the end of the line starting the loop, and we must indent anything we want to run inside the loop. Unlike many other languages, there is no command to signify the end of the loop body (e.g.  end for ); what is indented after the  for  statement belongs to the loop.",
            "title": "Automation with Loops"
        },
        {
            "location": "/modules/loops/#whats-in-a-name",
            "text": "In the example above, the loop variable was given the name  char  as a mnemonic; it is short for 'character'. \nWe can choose any name we want for variables. We might just as easily have chosen the name  banana  for the loop variable, as long as we use the same name when we invoke the variable inside the loop:  word = 'oxygen'\nfor banana in word:\n    print(banana)   output  \no\nx\ny\ng\ne\nn   It is a good idea to choose variable names that are meaningful, otherwise it would be more difficult to understand what the loop is doing.  Here's another loop that repeatedly updates a variable:  length = 0\nfor vowel in 'aeiou':\n    length = length + 1\nprint('There are', length, 'vowels')   output  \nThere are 5 vowels   It's worth tracing the execution of this little program step by step.  Since there are five characters in  'aeiou' ,\nthe statement on line 3 will be executed five times.  The first time around, length  is zero (the value assigned to it on line 1)\nand  vowel  is  'a' .\nThe statement adds 1 to the old value of  length ,\nproducing 1,\nand updates  length  to refer to that new value.  The next time around, vowel  is  'e'  and  length  is 1,\nso  length  is updated to be 2.  After three more updates, length  is 5;\nsince there is nothing left in  'aeiou'  for Python to process,\nthe loop finishes\nand the  print  statement on line 4 tells us our final answer.  Note that a loop variable is just a variable that's being used to record progress in a loop.\nIt still exists after the loop is over,\nand we can re-use variables previously defined as loop variables as well:  letter = 'z'\nfor letter in 'abc':\n    print(letter)\nprint('after the loop, letter is', letter)   output  \na\nb\nc\nafter the loop, letter is c   Note also that finding the length of a string is such a common operation that Python actually has a built-in function to do it called  len :  print(len('aeiou'))   output  \n5   len  is much faster than any function we could write ourselves,\nand much easier to read than a two-line loop;\nit will also give us the length of many other things that we haven't met yet,\nso we should always use it when we can.",
            "title": "What's in a name?"
        },
        {
            "location": "/modules/loops/#from-1-to-n",
            "text": "Python has a built-in function called  range  that creates a sequence of numbers.  range  can\naccept 1, 2, or 3 parameters.   If one parameter is given,  range  creates an array of that length,\n  starting at zero and incrementing by 1.\n  For example,  range(3)  produces the numbers  0, 1, 2 .  If two parameters are given,  range  starts at\n  the first and ends just before the second, incrementing by one.\n  For example,  range(2, 5)  produces  2, 3, 4 .  If  range  is given 3 parameters,\n  it starts at the first one, ends just before the second one, and increments by the third one.\n  For exmaple  range(3, 10, 2)  produces  3, 5, 7, 9 .",
            "title": "From 1 to N"
        },
        {
            "location": "/modules/loops/#challenge-loop-over-a-range",
            "text": "Using  range ,\nwrite a loop that uses  range  to print the first 3 natural numbers:  1\n2\n3",
            "title": "Challenge - loop over a range"
        },
        {
            "location": "/modules/loops/#computing-powers-with-loops",
            "text": "Exponentiation is built into Python:  print(5 ** 3)   output  \n125",
            "title": "Computing Powers With Loops"
        },
        {
            "location": "/modules/loops/#challenge-multiplication-in-a-loop",
            "text": "Write a loop that calculates the same result as  5 ** 3  using\nmultiplication (and without exponentiation).",
            "title": "Challenge - multiplication in a loop"
        },
        {
            "location": "/modules/loops/#challenge-reverse-a-string",
            "text": "Knowing that two strings can be concatenated using the  +  operator,\nwrite a loop that takes a string\nand produces a new string with the characters in reverse order,\nso  'Newton'  becomes  'notweN' .",
            "title": "Challenge  - reverse a string"
        },
        {
            "location": "/modules/loops/#computing-the-value-of-a-polynomial",
            "text": "The built-in function  enumerate  takes a sequence (e.g. a list) and generates a\nnew sequence of the same length. Each element of the new sequence is a pair composed of the index\n(0, 1, 2,...) and the value from the original sequence:  for i, x in enumerate(xs):\n    # Do something with i and x  The code above loops through  xs , assigning the index to  i  and the value to  x .",
            "title": "Computing the Value of a Polynomial"
        },
        {
            "location": "/modules/loops/#challenge-enumeration",
            "text": "Suppose you have encoded a polynomial as a list of coefficients in\nthe following way: the first element is the constant term, the\nsecond element is the coefficient of the linear term, the third is the\ncoefficient of the quadratic term, etc.  x = 5\ncc = [2, 4, 3]  y = cc[0] * x**0 + cc[1] * x**1 + cc[2] * x**2\ny = 97  Write a loop using  enumerate(cc)  which computes the value  y  of any\npolynomial, given  x  and  cc .",
            "title": "Challenge - enumeration"
        },
        {
            "location": "/modules/plotting_with_ggplot/",
            "text": ".output_label {\n    text-align: right;\n    margin: -1em;\n    padding: 0;\n    font-size: 0.5em;\n    color: grey\n}\n\n\n\n\nMaking Plots With ggplot (aka plotnine)\n\n\n\n\n\nIntroduction\n\n\nPython has a number of powerful plotting libraries to choose from. One of the oldest and most popular is \nmatplotlib\n - it forms the foundation for many other Python plotting libraries. For this exercise we are going to use \nplotnine\n which is a Python implementation of the \nThe Grammar of Graphics\n, inspired by the interface of the \nggplot2\n package from R. \nplotnine\n (and it's R cousin \nggplot2\n) is a very nice way to create publication quality plots.\n\n\nThe Grammar of Graphics\n\n\n\n\nStatistical graphics is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars)\n\n\nFaceting can be used to generate the same plot for different subsets of the dataset\n\n\n\n\nThese are basic building blocks according to the grammar of graphics:\n\n\n\n\ndata\n The data + a set of aesthetic mappings that describing variables mapping\n\n\ngeom\n Geometric objects, represent what you actually see on the plot: points, lines, polygons, etc.\n\n\nstats\n Statistical transformations, summarise data in many useful ways.\n\n\nscale\n The scales map values in the data space to values in an aesthetic space\n\n\ncoord\n A coordinate system, describes how data coordinates are mapped to the plane of the graphic.\n\n\nfacet\n A faceting specification describes how to break up the data into subsets for plotting individual set\n\n\n\n\nLet's explore these in detail.\n\n\nFirst, install the \npandas\n and \nplotnine\n packages to ensure they are available.\n\n\n!pip install pandas plotnine\n\n\n\n\n\n\noutput\n\n\n\nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: plotnine in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.3.0)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: six in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (1.11.0)\nRequirement already satisfied: statsmodels>=0.8.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (0.9.0)\nRequirement already satisfied: patsy>=0.4.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (0.5.0)\nRequirement already satisfied: scipy>=1.0.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (1.1.0)\nRequirement already satisfied: matplotlib>=2.1.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (2.2.2)\nRequirement already satisfied: mizani>=0.4.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (0.4.6)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib>=2.1.0->plotnine) (2.2.0)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib>=2.1.0->plotnine) (0.10.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib>=2.1.0->plotnine) (1.0.1)\nRequirement already satisfied: palettable in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from mizani>=0.4.1->plotnine) (3.1.1)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib>=2.1.0->plotnine) (39.1.0)\n\n\n\n\n\n\n\n# We run this to suppress various deprecation warnings from plotnine - keeps our notebook cleaner\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\n\n\nPlotting in ggplot style\n\n\nLet set up our working environment with necessary libraries and also load our csv file into data frame called \nsurvs_df\n,\n\n\nimport numpy as np\nimport pandas as pd\nfrom plotnine import *\n\n%matplotlib inline\nsurvs_df = pd.read_csv('data/surveys.csv').dropna()\n\n\n\n\nTo produce a plot with the \nggplot\n class from \nplotnine\n, we must provide three things:\n\n\n\n\nA data frame containing our data.\n\n\nHow the columns of the data frame can be translated into positions, colors, sizes, and shapes of graphical elements (\"aesthetics\").\n\n\nThe actual graphical elements to display (\"geometric objects\").\n\n\n\n\nIntroduction to plotting\n\n\nggplot(survs_df, aes('weight', 'hindfoot_length')) + geom_point()\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nLets see if we can also include information about species and year\n\n\nggplot(survs_df, aes('weight', 'hindfoot_length',\n    size = 'year')) + geom_point()\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nggplot(survs_df, aes('weight', 'hindfoot_length', \n    size = 'year', color = 'species_id')) + geom_point()\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nWe can do simple counting plot, to see how many observation (data points) we have for each year for example\n\n\nggplot(survs_df, aes('year')) + \\\n    geom_bar(stat = 'count')\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nLet's now also color by species to see how many observation we have per species in a given year\n\n\nggplot(survs_df, aes('year', fill = 'species_id')) + \\\n    geom_bar(stat = 'count')\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nChallenges\n\n\nIs there a better visualisation for comparing weight across years? The plot should have categorical data on x axis and continuous on y axis.\n\n\nPlot a boxplot of \nhindfoot_length\n across different species (\nspecies_id\n column).\n\n\n\n\n\n\n\n\nMore geom types\n\n\nggplot(survs_df, aes('year', 'weight')) + \\\n    geom_boxplot()\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nWhy are we not seeing mulitple boxplots, one for each year?\nThis is because year variable is continues in our data frame, but for the purpose we want it to be categorical.\n\n\nsurvs_df['year_fact'] = pd.Series(survs_df['year'], dtype = \"category\")\n\nggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot()\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nYou'll notice the x-axis labels are overlapped. To flip them 90-degrees we can apply a \ntheme\n so they look less cluttered. We will revisit themes later.\n\n\nggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot() + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nTo save some typing, let's define this x-axis label rotating theme as a short variable name that we can reuse:\n\n\nflip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=1))\n\n\n\n\nggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_violin() + \\\n    flip_xlabels\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nTo save an image for later:\n\n\nplt1 = ggplot(survs_df, aes('year_fact', 'weight')) + \\\n           geom_boxplot() + \\\n           xlab(\"Years\") + \\\n           ylab(\"Weight log2(kg)\") + \\\n           ggtitle(\"Boxplots, summary of species weight in each year\")\n\nggsave(filename=\"plot1.png\",\n       plot=plt1,\n       device='png',\n       dpi=300,\n       height=25,\n       width=25)\n\n\n\n\n\n\noutput\n\n\n\n/Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/plotnine/ggplot.py:688: UserWarning: Saving 25 x 25 in image.\n  from_inches(height, units), units))\n/Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/plotnine/ggplot.py:689: UserWarning: Filename: plot1.png\n  warn('Filename: {}'.format(filename))\n\n\n\n\n\n\n\nChallenges\n\n\nCan you log2 transform \nweight\n and plot a \"normalised\" boxplot ? Hint: use \nnp.log2()\n function and name new column \nweight_log\n.\n\n\nDoes a log2 transform make this data visualisation better ?\n\n\n\n\n\n\n\n\nsurvs_df['weight_log'] = np.log2(survs_df['weight'])\n\nggplot(survs_df, aes('year_fact', 'weight_log')) + \\\n    geom_boxplot() + \\\n    xlab(\"Years\") + \\\n    ylab(\"Weight log2(kg)\") + \\\n    ggtitle(\"Boxplots, summary of species wieght in each year\") + \\\n    flip_xlabels\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nFaceting\n\n\nggplot has a special technique called \nfaceting\n that allows to split one plot\ninto multiple plots based on a factor included in the dataset. We will use it to\nmake one plot for a time series for each species.\n\n\nggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot() + \\\n    facet_wrap(\"~sex\") + \\\n    flip_xlabels + \\\n    theme(axis_text_x = element_text(size=6))\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nggplot(survs_df, aes('year_fact', 'weight_log')) + \\\n    geom_boxplot() + \\\n    theme(axis_text_x = element_text(size=6, angle=90, hjust=1)) + \\\n    facet_wrap(\"~species_id\") + \\\n    flip_xlabels + \\\n    theme(axis_text_x = element_text(size=8))\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nTheming\n\n\nggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot() + \\\n    theme_bw() + \\\n    flip_xlabels\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nggplot(survs_df, aes('year_fact', 'weight_log')) + \\\n    geom_boxplot() + \\\n    facet_wrap(\"~species_id\") + \\\n    theme_xkcd() + \\\n    theme(axis_text_x = element_text(size=4, angle=90, hjust=1))\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nExtra bits 1\n\n\nLet's try to bin years into decades, which could be crude but might gives simple images to look at.\n\n\nbins = [(survs_df['year'] < 1980),\n        (survs_df['year'] < 1990),\n        (survs_df['year'] < 2000),\n        (survs_df['year'] >= 2000)]\n\nlabels = ['70s', '80s', '90s', 'Z']\n\nsurvs_df['year_bins'] = np.select(bins, labels)\n\n\n\n\nplt2 = ggplot(survs_df, aes('year_bins', 'weight_log')) + \\\n           geom_boxplot()\nplt2\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nplt2 = ggplot(survs_df, aes('year_bins', 'weight_log')) + \\\n           geom_boxplot() + \\\n           theme(axis_text_x = element_text(angle=90, hjust=1)) + \\\n           facet_wrap(\"~species_id\") \nplt2\n\n\n\n\n\n\n\n\noutput\n\n\n\n\n\n\n\n\n\n\n\nExtra bits 2\n\n\nThis is a different way to look at your data\n\n\nggplot(survs_df, aes(\"year_fact\", \"weight\")) + \\\n    stat_summary(fun_y = np.mean, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n\nggplot(survs_df, aes(\"year_fact\", \"weight\")) + \\\n    stat_summary(fun_y = np.median, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n\nggplot(survs_df, aes(\"year_fact\", \"weight_log\")) + \\\n    stat_summary(fun_y = np.mean, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n\n\n\n\n\n\n\n\noutput",
            "title": "Plotting with ggplot for Python"
        },
        {
            "location": "/modules/plotting_with_ggplot/#making-plots-with-ggplot-aka-plotnine",
            "text": "",
            "title": "Making Plots With ggplot (aka plotnine)"
        },
        {
            "location": "/modules/plotting_with_ggplot/#introduction",
            "text": "Python has a number of powerful plotting libraries to choose from. One of the oldest and most popular is  matplotlib  - it forms the foundation for many other Python plotting libraries. For this exercise we are going to use  plotnine  which is a Python implementation of the  The Grammar of Graphics , inspired by the interface of the  ggplot2  package from R.  plotnine  (and it's R cousin  ggplot2 ) is a very nice way to create publication quality plots.",
            "title": "Introduction"
        },
        {
            "location": "/modules/plotting_with_ggplot/#the-grammar-of-graphics",
            "text": "Statistical graphics is a mapping from data to aesthetic attributes (colour, shape, size) of geometric objects (points, lines, bars)  Faceting can be used to generate the same plot for different subsets of the dataset   These are basic building blocks according to the grammar of graphics:   data  The data + a set of aesthetic mappings that describing variables mapping  geom  Geometric objects, represent what you actually see on the plot: points, lines, polygons, etc.  stats  Statistical transformations, summarise data in many useful ways.  scale  The scales map values in the data space to values in an aesthetic space  coord  A coordinate system, describes how data coordinates are mapped to the plane of the graphic.  facet  A faceting specification describes how to break up the data into subsets for plotting individual set   Let's explore these in detail.  First, install the  pandas  and  plotnine  packages to ensure they are available.  !pip install pandas plotnine   output  \nRequirement already satisfied: pandas in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.23.0)\nRequirement already satisfied: plotnine in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (0.3.0)\nRequirement already satisfied: python-dateutil>=2.5.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2.7.3)\nRequirement already satisfied: pytz>=2011k in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (2018.4)\nRequirement already satisfied: numpy>=1.9.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from pandas) (1.14.3)\nRequirement already satisfied: six in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (1.11.0)\nRequirement already satisfied: statsmodels>=0.8.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (0.9.0)\nRequirement already satisfied: patsy>=0.4.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (0.5.0)\nRequirement already satisfied: scipy>=1.0.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (1.1.0)\nRequirement already satisfied: matplotlib>=2.1.0 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (2.2.2)\nRequirement already satisfied: mizani>=0.4.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from plotnine) (0.4.6)\nRequirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib>=2.1.0->plotnine) (2.2.0)\nRequirement already satisfied: cycler>=0.10 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib>=2.1.0->plotnine) (0.10.0)\nRequirement already satisfied: kiwisolver>=1.0.1 in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from matplotlib>=2.1.0->plotnine) (1.0.1)\nRequirement already satisfied: palettable in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from mizani>=0.4.1->plotnine) (3.1.1)\nRequirement already satisfied: setuptools in /Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages (from kiwisolver>=1.0.1->matplotlib>=2.1.0->plotnine) (39.1.0)   # We run this to suppress various deprecation warnings from plotnine - keeps our notebook cleaner\nimport warnings\nwarnings.filterwarnings('ignore')",
            "title": "The Grammar of Graphics"
        },
        {
            "location": "/modules/plotting_with_ggplot/#plotting-in-ggplot-style",
            "text": "Let set up our working environment with necessary libraries and also load our csv file into data frame called  survs_df ,  import numpy as np\nimport pandas as pd\nfrom plotnine import *\n\n%matplotlib inline\nsurvs_df = pd.read_csv('data/surveys.csv').dropna()  To produce a plot with the  ggplot  class from  plotnine , we must provide three things:   A data frame containing our data.  How the columns of the data frame can be translated into positions, colors, sizes, and shapes of graphical elements (\"aesthetics\").  The actual graphical elements to display (\"geometric objects\").",
            "title": "Plotting in ggplot style"
        },
        {
            "location": "/modules/plotting_with_ggplot/#introduction-to-plotting",
            "text": "ggplot(survs_df, aes('weight', 'hindfoot_length')) + geom_point()    output      Lets see if we can also include information about species and year  ggplot(survs_df, aes('weight', 'hindfoot_length',\n    size = 'year')) + geom_point()    output      ggplot(survs_df, aes('weight', 'hindfoot_length', \n    size = 'year', color = 'species_id')) + geom_point()    output      We can do simple counting plot, to see how many observation (data points) we have for each year for example  ggplot(survs_df, aes('year')) + \\\n    geom_bar(stat = 'count')    output      Let's now also color by species to see how many observation we have per species in a given year  ggplot(survs_df, aes('year', fill = 'species_id')) + \\\n    geom_bar(stat = 'count')    output",
            "title": "Introduction to plotting"
        },
        {
            "location": "/modules/plotting_with_ggplot/#challenges",
            "text": "Is there a better visualisation for comparing weight across years? The plot should have categorical data on x axis and continuous on y axis.  Plot a boxplot of  hindfoot_length  across different species ( species_id  column).",
            "title": "Challenges"
        },
        {
            "location": "/modules/plotting_with_ggplot/#more-geom-types",
            "text": "ggplot(survs_df, aes('year', 'weight')) + \\\n    geom_boxplot()    output      Why are we not seeing mulitple boxplots, one for each year?\nThis is because year variable is continues in our data frame, but for the purpose we want it to be categorical.  survs_df['year_fact'] = pd.Series(survs_df['year'], dtype = \"category\")\n\nggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot()    output      You'll notice the x-axis labels are overlapped. To flip them 90-degrees we can apply a  theme  so they look less cluttered. We will revisit themes later.  ggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot() + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))    output      To save some typing, let's define this x-axis label rotating theme as a short variable name that we can reuse:  flip_xlabels = theme(axis_text_x = element_text(angle=90, hjust=1))  ggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_violin() + \\\n    flip_xlabels    output      To save an image for later:  plt1 = ggplot(survs_df, aes('year_fact', 'weight')) + \\\n           geom_boxplot() + \\\n           xlab(\"Years\") + \\\n           ylab(\"Weight log2(kg)\") + \\\n           ggtitle(\"Boxplots, summary of species weight in each year\")\n\nggsave(filename=\"plot1.png\",\n       plot=plt1,\n       device='png',\n       dpi=300,\n       height=25,\n       width=25)   output  \n/Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/plotnine/ggplot.py:688: UserWarning: Saving 25 x 25 in image.\n  from_inches(height, units), units))\n/Users/perry/.virtualenvs/python-workshop-base-ufuVBSbV/lib/python3.6/site-packages/plotnine/ggplot.py:689: UserWarning: Filename: plot1.png\n  warn('Filename: {}'.format(filename))",
            "title": "More geom types"
        },
        {
            "location": "/modules/plotting_with_ggplot/#challenges_1",
            "text": "Can you log2 transform  weight  and plot a \"normalised\" boxplot ? Hint: use  np.log2()  function and name new column  weight_log .  Does a log2 transform make this data visualisation better ?    survs_df['weight_log'] = np.log2(survs_df['weight'])\n\nggplot(survs_df, aes('year_fact', 'weight_log')) + \\\n    geom_boxplot() + \\\n    xlab(\"Years\") + \\\n    ylab(\"Weight log2(kg)\") + \\\n    ggtitle(\"Boxplots, summary of species wieght in each year\") + \\\n    flip_xlabels    output",
            "title": "Challenges"
        },
        {
            "location": "/modules/plotting_with_ggplot/#faceting",
            "text": "ggplot has a special technique called  faceting  that allows to split one plot\ninto multiple plots based on a factor included in the dataset. We will use it to\nmake one plot for a time series for each species.  ggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot() + \\\n    facet_wrap(\"~sex\") + \\\n    flip_xlabels + \\\n    theme(axis_text_x = element_text(size=6))    output      ggplot(survs_df, aes('year_fact', 'weight_log')) + \\\n    geom_boxplot() + \\\n    theme(axis_text_x = element_text(size=6, angle=90, hjust=1)) + \\\n    facet_wrap(\"~species_id\") + \\\n    flip_xlabels + \\\n    theme(axis_text_x = element_text(size=8))    output",
            "title": "Faceting"
        },
        {
            "location": "/modules/plotting_with_ggplot/#theming",
            "text": "ggplot(survs_df, aes('year_fact', 'weight')) + \\\n    geom_boxplot() + \\\n    theme_bw() + \\\n    flip_xlabels    output      ggplot(survs_df, aes('year_fact', 'weight_log')) + \\\n    geom_boxplot() + \\\n    facet_wrap(\"~species_id\") + \\\n    theme_xkcd() + \\\n    theme(axis_text_x = element_text(size=4, angle=90, hjust=1))    output",
            "title": "Theming"
        },
        {
            "location": "/modules/plotting_with_ggplot/#extra-bits-1",
            "text": "Let's try to bin years into decades, which could be crude but might gives simple images to look at.  bins = [(survs_df['year'] < 1980),\n        (survs_df['year'] < 1990),\n        (survs_df['year'] < 2000),\n        (survs_df['year'] >= 2000)]\n\nlabels = ['70s', '80s', '90s', 'Z']\n\nsurvs_df['year_bins'] = np.select(bins, labels)  plt2 = ggplot(survs_df, aes('year_bins', 'weight_log')) + \\\n           geom_boxplot()\nplt2    output      plt2 = ggplot(survs_df, aes('year_bins', 'weight_log')) + \\\n           geom_boxplot() + \\\n           theme(axis_text_x = element_text(angle=90, hjust=1)) + \\\n           facet_wrap(\"~species_id\") \nplt2    output",
            "title": "Extra bits 1"
        },
        {
            "location": "/modules/plotting_with_ggplot/#extra-bits-2",
            "text": "This is a different way to look at your data  ggplot(survs_df, aes(\"year_fact\", \"weight\")) + \\\n    stat_summary(fun_y = np.mean, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n\nggplot(survs_df, aes(\"year_fact\", \"weight\")) + \\\n    stat_summary(fun_y = np.median, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))\n\nggplot(survs_df, aes(\"year_fact\", \"weight_log\")) + \\\n    stat_summary(fun_y = np.mean, fun_ymin=np.min, fun_ymax=np.max) + \\\n    theme(axis_text_x = element_text(angle=90, hjust=1))    output",
            "title": "Extra bits 2"
        },
        {
            "location": "/halfday/",
            "text": "Introduction to Python Workshop (half-day)\n\n\nWelcome to \nIntroduction to Python\n !\n\n\nSections\n\n\n\n\n01 - \nIntroduction - the basics of Python\n\n\n02 - \nData analysis in Python with Pandas\n\n\n03 - \nMissing Values\n\n\n04 - \nRepetitive tasks with loops\n\n\n05 - \nPlotting with plotnine (ggplot)",
            "title": "Half Day Course"
        },
        {
            "location": "/halfday/#introduction-to-python-workshop-half-day",
            "text": "Welcome to  Introduction to Python  !",
            "title": "Introduction to Python Workshop (half-day)"
        },
        {
            "location": "/halfday/#sections",
            "text": "01 -  Introduction - the basics of Python  02 -  Data analysis in Python with Pandas  03 -  Missing Values  04 -  Repetitive tasks with loops  05 -  Plotting with plotnine (ggplot)",
            "title": "Sections"
        },
        {
            "location": "/fullday/",
            "text": "Introduction to Python Workshop\n\n\nWelcome to \nIntroduction to Python\n !\n\n\nSections\n\n\n\n\n01 - \nIntroduction - the basics of Python\n\n\n02 - \nData analysis in Python with Pandas\n\n\n03 - \nIndexing and slicing\n\n\n04 - \nRepetitive tasks with loops\n\n\n05 - \nPlotting with plotnine (ggplot)\n\n\n.. more ..",
            "title": "Full Day Course"
        },
        {
            "location": "/fullday/#introduction-to-python-workshop",
            "text": "Welcome to  Introduction to Python  !",
            "title": "Introduction to Python Workshop"
        },
        {
            "location": "/fullday/#sections",
            "text": "01 -  Introduction - the basics of Python  02 -  Data analysis in Python with Pandas  03 -  Indexing and slicing  04 -  Repetitive tasks with loops  05 -  Plotting with plotnine (ggplot)  .. more ..",
            "title": "Sections"
        }
    ]
}